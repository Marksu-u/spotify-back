{"version":3,"file":"static/js/828.95e857aa.chunk.js","mappings":"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","sources":["components/Card/index.js"],"sourcesContent":["import React, { useState, lazy } from 'react';\nimport PropTypes from 'prop-types';\nimport { apiService } from '../../services/apiService';\nimport { notificationService } from '../../services/notificationService';\nimport './index.css';\n\nconst Button = lazy(() => import('../Button'));\nconst Modal = lazy(() => import('../Modal'));\n\nconst Card = ({ type, data, onClick }) => {\n  const [isModalOpen, setModalOpen] = useState(false);\n  const [currentData, setCurrentData] = useState(null);\n  const [actionType, setActionType] = useState(null);\n\n  const handleCRUD = (actionType) => {\n    setCurrentData(data);\n    setModalOpen(true);\n    setActionType(actionType);\n  };\n\n  const handleModalClose = () => {\n    setModalOpen(false);\n    setCurrentData({});\n  };\n\n  const handleSubmit = async (updatedData, actionType) => {\n    await onSubmit(updatedData, actionType, type);\n    setModalOpen(false);\n  };\n\n  const onSubmit = async (updatedData, actionType, type) => {\n    try {\n      if (actionType === 'update') {\n        switch (type) {\n          case 'artist':\n            // j'suis claqué j'vois pas pourquoi j'dois faire ça\n            const data = {\n              id: updatedData.id,\n              name: updatedData.title,\n            };\n            await apiService.editArtist(updatedData.id, data);\n            break;\n          case 'song':\n            await apiService.editAudio(updatedData.id, updatedData);\n            break;\n          case 'album':\n            await apiService.editAlbum(updatedData.id, updatedData);\n            break;\n        }\n        notificationService.notify('Mise à jour réussie', 'success');\n      } else if (actionType === 'delete') {\n        switch (type) {\n          case 'artist':\n            await apiService.deleteArtist(updatedData.id);\n            break;\n          case 'song':\n            await apiService.deleteSong(updatedData.id);\n            break;\n          case 'album':\n            await apiService.deleteAlbum(updatedData.id);\n            break;\n        }\n        notificationService.notify('Suppression réussie', 'success');\n      }\n    } catch (error) {\n      console.error(\"Erreur lors de l'action:\", error);\n      notificationService.notify(\"Erreur lors de l'action\", 'error');\n    }\n    setModalOpen(false);\n  };\n\n  const renderContent = () => {\n    switch (type) {\n      /* ------ ARTISTE ------ */\n      case 'artist':\n        return (\n          <div className=\"card\">\n            <div className=\"card-content\">\n              <div className=\"card-details\">{data.title}</div>\n            </div>\n          </div>\n        );\n\n      /* ------ AUDIO ------ */\n      case 'song':\n        return (\n          <div className=\"card\">\n            <div className=\"card-image\">\n              <img src={data.image} alt={data.album} />\n            </div>\n            <div className=\"card-content\">\n              <div className=\"card-title\">{data.title}</div>\n              <div className=\"card-details\">\n                <div>\n                  {data.artist} - {data.album}\n                </div>\n                <div>{data.date}</div>\n              </div>\n              <div className=\"card-genre\">\n                <div>{data.genre}</div>\n              </div>\n            </div>\n          </div>\n        );\n\n      /* ------ ALBUM ------ */\n      case 'album':\n        return (\n          <div className=\"card\">\n            <div className=\"card-image\">\n              <img src={data.image} alt={data.title} />\n            </div>\n            <div className=\"card-content\">\n              <div className=\"card-title\">{data.title}</div>\n              <div className=\"card-details\">\n                <div>\n                  {data.artist} {data.date}\n                </div>\n              </div>\n              <div className=\"card-genre\">\n                <div>Genre : {data.genre}</div>\n              </div>\n            </div>\n          </div>\n        );\n\n      /* ------ ADMIN ------ */\n      case 'admin':\n        return (\n          <div className=\"card\">\n            <div className=\"card-content\">\n              <div className=\"card-title\">{data.title}</div>\n              <div className=\"card-details\">\n                <div>{data.artist}</div>\n              </div>\n            </div>\n          </div>\n        );\n\n      /* ------ DEFAULT ------ */\n      default:\n        return <div>Données non disponibles</div>;\n    }\n  };\n\n  const renderCRUDButtons = () => (\n    <div className=\"button-container\">\n      <Button label=\"Modifier\" onClick={() => handleCRUD('update')} />\n      <Button label=\"Supprimer\" onClick={() => handleCRUD('delete')} />\n    </div>\n  );\n\n  return (\n    <div className=\"card\" onClick={onClick}>\n      {renderContent()}\n      {renderCRUDButtons()}\n      {isModalOpen && (\n        <Modal\n          isOpen={isModalOpen}\n          onClose={handleModalClose}\n          data={currentData}\n          onSubmit={handleSubmit}\n          actionType={actionType}\n          type={type}\n        />\n      )}\n    </div>\n  );\n};\n\nCard.propTypes = {\n  type: PropTypes.oneOf(['artist', 'song', 'album', 'admin']),\n  title: PropTypes.string,\n  image: PropTypes.string,\n  data: PropTypes.any,\n  onClick: PropTypes.func,\n};\n\nCard.defaultProps = {\n  onClick: () => {},\n};\n\nexport default Card;\n"],"names":["Button","lazy","Modal","Card","_ref","type","data","onClick","isModalOpen","setModalOpen","useState","currentData","setCurrentData","actionType","setActionType","handleCRUD","onSubmit","async","updatedData","id","name","title","apiService","editArtist","editAudio","editAlbum","notificationService","notify","deleteArtist","deleteSong","deleteAlbum","error","console","_jsxs","className","children","renderContent","_jsx","src","image","alt","album","artist","date","genre","label","isOpen","onClose","handleModalClose","defaultProps"],"sourceRoot":""}