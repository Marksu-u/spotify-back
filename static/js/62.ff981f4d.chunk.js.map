{"version":3,"file":"static/js/62.ff981f4d.chunk.js","mappings":"iMAOA,MAAMA,GAAOC,EAAAA,EAAAA,OAAK,IAAM,+BAClBC,GAAUD,EAAAA,EAAAA,OAAK,IAAM,+BACrBE,GAAeF,EAAAA,EAAAA,OAAK,IAAM,+BAC1BG,GAASH,EAAAA,EAAAA,OAAK,IAAM,+BAyG1B,EArGiBI,IAAsB,IAArB,MAAEC,EAAK,KAAEC,GAAMF,EAC/B,MAAOG,EAAaC,IAAkBC,EAAAA,EAAAA,UAAS,IACxCC,EAAaC,IAAkBF,EAAAA,EAAAA,UAAS,IAEzCG,GAAgBC,EAAAA,EAAAA,UAAQ,IACrBR,EAAMS,QAAQC,IACnB,MAAMC,IAAaD,EAAKE,OACpBF,EAAKE,MAAMC,cAAcC,SAAST,EAAYQ,eAE5CE,IAAcL,EAAKM,QACrBN,EAAKM,OAAOH,cAAcC,SAAST,EAAYQ,eAEnD,OAAOF,GAAcI,CAAW,KAEjC,CAACf,EAAOK,IAELY,EAAaC,KAAKC,KAAKZ,EAAca,OAlBtB,GAmBfC,GAAeb,EAAAA,EAAAA,UAAQ,KAC3B,MAAMc,EApBa,GAoBJpB,EAAc,GAC7B,OAAOK,EAAcgB,MAAMD,EAAOA,EArBf,EAqBsC,GACxD,CAACpB,EAAaK,IACjBiB,QAAQC,IAAI,WAAYJ,GAExB,MAAMK,GAAkBlB,EAAAA,EAAAA,UACtB,KACEmB,EAAAA,EAAAA,KAACC,EAAAA,SAAQ,CAACC,UAAUF,EAAAA,EAAAA,KAACG,EAAAA,EAAM,IAAIC,SAC5BV,EAAaW,KAAKtB,IACjBiB,EAAAA,EAAAA,KAACjC,EAAI,CAAgBuC,KAAMvB,EAAMT,KAAMA,GAA5BS,EAAKwB,UAItB,CAACb,EAAcpB,IAGXkC,EAAmBA,IACvBhC,GAAgBiC,GAASlB,KAAKmB,IAAID,EAAO,EAAG,KACxCE,EAAeA,IACnBnC,GAAgBiC,GAASlB,KAAKqB,IAAIH,EAAO,EAAGnB,KAoC9C,OACEuB,EAAAA,EAAAA,MAAA,OAAAT,SAAA,EACEJ,EAAAA,EAAAA,KAAA,OAAAI,UACEJ,EAAAA,EAAAA,KAAC7B,EAAM,CAAC2C,eArCcC,IAC1BpC,EAAeoC,GACfvC,EAAe,EAAE,OAqCfwB,EAAAA,EAAAA,KAAC9B,EAAY,CACXK,YAAaA,EACbe,WAAYA,EACZ0B,WAAYR,EACZS,OAAQN,IAETZ,GACDC,EAAAA,EAAAA,KAAC/B,EAAO,CAACK,KAAMA,EAAM4C,MAzCHC,MAAOC,EAAS9C,KACpC,IAEE,OADAuB,QAAQC,IAAI,YAAasB,GACjB9C,GACN,IAAK,eACG+C,EAAAA,EAAWC,aAAaF,GAC9B,MAAMG,QAAkBF,EAAAA,EAAWG,gBAC7BC,EAAc,CAAElB,IAAKgB,EAAUhB,IAAKmB,KAAMH,EAAUtC,cACnDwC,EAAYlB,UACboB,EAAAA,EAAAA,IAAUF,GAChB,MACF,IAAK,aACGJ,EAAAA,EAAWO,YAAYR,GAC7B,MACF,IAAK,cACGC,EAAAA,EAAWQ,YAAYT,GAC7B,MACF,IAAK,cACGC,EAAAA,EAAWS,SAASV,SACHC,EAAAA,EAAWU,eAItCC,EAAAA,EAAoBC,OAAO,mBAAiB,UAC9C,CAAE,MAAOC,GACPrC,QAAQqC,MAAM,8CAAyCA,EACzD,MAgBElC,EAAAA,EAAAA,KAAC9B,EAAY,CACXK,YAAaA,EACbe,WAAYA,EACZ0B,WAAYR,EACZS,OAAQN,MAEN,C","sources":["components/CardList/index.js"],"sourcesContent":["import React, { useState, useMemo, lazy, Suspense } from 'react';\nimport { notificationService } from '../../services/notificationService';\nimport { apiService } from '../../services/apiService';\nimport { addArtist } from '../../services/indexerDBService';\nimport PropTypes from 'prop-types';\n\nimport Loader from '../Loader';\nconst Card = lazy(() => import('../Card'));\nconst CardAdd = lazy(() => import('../CardAdd'));\nconst PageControls = lazy(() => import('../PageControls'));\nconst Search = lazy(() => import('../Search'));\n\nconst ITEMS_PER_PAGE = 4;\n\nconst CardList = ({ items, type }) => {\n  const [currentPage, setCurrentPage] = useState(1);\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const filteredItems = useMemo(() => {\n    return items.filter((item) => {\n      const titleMatch = item.title\n        ? item.title.toLowerCase().includes(searchQuery.toLowerCase())\n        : false;\n      const artistMatch = item.artist\n        ? item.artist.toLowerCase().includes(searchQuery.toLowerCase())\n        : false;\n      return titleMatch || artistMatch;\n    });\n  }, [items, searchQuery]);\n\n  const totalPages = Math.ceil(filteredItems.length / ITEMS_PER_PAGE);\n  const currentItems = useMemo(() => {\n    const start = (currentPage - 1) * ITEMS_PER_PAGE;\n    return filteredItems.slice(start, start + ITEMS_PER_PAGE);\n  }, [currentPage, filteredItems]);\n  console.log('ITEMS : ', currentItems);\n\n  const renderListItems = useMemo(\n    () => (\n      <Suspense fallback={<Loader />}>\n        {currentItems.map((item) => (\n          <Card key={item._id} data={item} type={type} />\n        ))}\n      </Suspense>\n    ),\n    [currentItems, type]\n  );\n\n  const goToPreviousPage = () =>\n    setCurrentPage((page) => Math.max(page - 1, 1));\n  const goToNextPage = () =>\n    setCurrentPage((page) => Math.min(page + 1, totalPages));\n\n  const handleSearchChange = (query) => {\n    setSearchQuery(query);\n    setCurrentPage(1);\n  };\n\n  const handleAddItem = async (newData, type) => {\n    try {\n      console.log('newData :', newData);\n      switch (type) {\n        case 'artist':\n          await apiService.createArtist(newData);\n          const newArtist = await apiService.getLastArtist();\n          const artistToAdd = { _id: newArtist._id, name: newArtist.title };\n          delete artistToAdd._id;\n          await addArtist(artistToAdd);\n          break;\n        case 'song':\n          await apiService.uploadAudio(newData);\n          break;\n        case 'album':\n          await apiService.createAlbum(newData);\n          break;\n        case 'admin':\n          await apiService.addAdmin(newData);\n          const newAdmin = await apiService.getLastAdmin();\n          // const adminToAdd = { _id: newAdmin._id, name: newAdmin. };\n          break;\n      }\n      notificationService.notify('Ajout réussie', 'success');\n    } catch (error) {\n      console.error(\"Erreur lors de l'ajout de l'élément :\", error);\n    }\n  };\n\n  return (\n    <div>\n      <div>\n        <Search onSearchChange={handleSearchChange} />\n      </div>\n      <PageControls\n        currentPage={currentPage}\n        totalPages={totalPages}\n        onPrevious={goToPreviousPage}\n        onNext={goToNextPage}\n      />\n      {renderListItems}\n      <CardAdd type={type} onAdd={handleAddItem} />\n      <PageControls\n        currentPage={currentPage}\n        totalPages={totalPages}\n        onPrevious={goToPreviousPage}\n        onNext={goToNextPage}\n      />\n    </div>\n  );\n};\n\nCardList.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.object).isRequired,\n  type: PropTypes.oneOf(['artist', 'song', 'album', 'admin']).isRequired,\n};\n\nexport default CardList;\n"],"names":["Card","lazy","CardAdd","PageControls","Search","_ref","items","type","currentPage","setCurrentPage","useState","searchQuery","setSearchQuery","filteredItems","useMemo","filter","item","titleMatch","title","toLowerCase","includes","artistMatch","artist","totalPages","Math","ceil","length","currentItems","start","slice","console","log","renderListItems","_jsx","Suspense","fallback","Loader","children","map","data","_id","goToPreviousPage","page","max","goToNextPage","min","_jsxs","onSearchChange","query","onPrevious","onNext","onAdd","async","newData","apiService","createArtist","newArtist","getLastArtist","artistToAdd","name","addArtist","uploadAudio","createAlbum","addAdmin","getLastAdmin","notificationService","notify","error"],"sourceRoot":""}