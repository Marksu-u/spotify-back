{"version":3,"file":"static/js/332.4a5bec31.chunk.js","mappings":"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","sources":["components/Loader/index.js","services/apiService.js","views/AdminDashboardView.js"],"sourcesContent":["import React from 'react';\nimport './index.css';\n\nconst Loader = () => (\n  <div className=\"loader-container\">\n    <div className=\"loader\"></div>\n    <p className=\"loader-text\">\n      Le premier chargement des données peut prendre de 10 à 30 secondes. Si\n      cela prend trop de temps, n'hésitez pas à contacter notre support.\n    </p>\n  </div>\n);\n\nexport default Loader;\n","const API_URL = process.env.REACT_APP_API_URL;\n\n/* ------------- AUDIO ------------- */\nconst getAudios = async () => {\n  const response = await fetch(`${API_URL}audio`);\n  if (!response.ok)\n    throw new Error('Erreur lors de la récupération de l’audio');\n  return await response.json();\n};\n\nconst getSingleAudio = async (id) => {\n  const response = await fetch(`${API_URL}audio/${id}`);\n  if (!response.ok)\n    throw new Error('Erreur lors de la récupération de l’audio');\n  return await response.json();\n};\n\nconst getLastAudio = async (id) => {\n  const response = await fetch(`${API_URL}audio/last`);\n  if (!response.ok)\n    throw new Error('Erreur lors de la récupération de l’audio');\n  return await response.json();\n};\n\nconst editAudio = async (id, audioData) => {\n  const token = localStorage.getItem('userToken');\n  const response = await fetch(`${API_URL}audio/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(audioData),\n  });\n  if (!response.ok)\n    throw new Error('Erreur lors de la modification de l’audio');\n  return await response.json();\n};\n\nconst uploadAudio = async (audioFile) => {\n  const token = localStorage.getItem('userToken');\n  const formData = new FormData();\n  formData.append('audioFile', audioFile);\n\n  const response = await fetch(`${API_URL}audio/upload`, {\n    method: 'POST',\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n    body: formData,\n  });\n  if (!response.ok) throw new Error('Erreur lors de l’upload de l’audio');\n  return await response.json();\n};\n\nconst deleteAudio = async (id) => {\n  const token = localStorage.getItem('userToken');\n  const response = await fetch(`${API_URL}audio/${id}`, {\n    method: 'DELETE',\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  if (!response.ok) throw new Error('Erreur lors de la suppression de l’audio');\n  return await response.json();\n};\n\nconst streamAudio = async (id) => {\n  const response = await fetch(`${API_URL}audio/stream/${id}`);\n  if (!response.ok) throw new Error('Erreur lors du streaming de l’audio');\n  return await response.json();\n};\n\nconst getStreamingCount = async (id) => {\n  const response = await fetch(`${API_URL}audio/streamed/${id}`);\n  if (!response.ok)\n    throw new Error('Erreur lors de la récupération du nombre de stream');\n  return await response.json();\n};\n\n/* ------------- ARTIST ------------- */\nconst getArtists = async () => {\n  const response = await fetch(`${API_URL}artist`);\n  if (!response.ok) throw new Error('Erreur lors du chargement des artistes');\n  return await response.json();\n};\n\nexport const getLastArtist = async () => {\n  const response = await fetch(`${API_URL}artist/last`);\n  const data = await response.json();\n  return data;\n};\n\nconst getSingleArtist = async (id) => {\n  const response = await fetch(`${API_URL}artist/${id}`);\n  if (!response.ok)\n    throw new Error('Erreur lors de la récupération de l’artiste');\n  return await response.json();\n};\n\nconst editArtist = async (artistData) => {\n  const token = localStorage.getItem('userToken');\n  const id = artistData.id;\n  const response = await fetch(`${API_URL}artist/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(artistData),\n  });\n  if (!response.ok)\n    throw new Error('Erreur lors de la modification de l’artiste');\n  return await response.json();\n};\n\nconst createArtist = async (artistData) => {\n  const token = localStorage.getItem('userToken');\n  const response = await fetch(`${API_URL}artist`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(artistData),\n  });\n  if (!response.ok) throw new Error('Erreur lors de la création de l’artiste');\n  return await response.json();\n};\n\nconst deleteArtist = async (id) => {\n  const token = localStorage.getItem('userToken');\n  const response = await fetch(`${API_URL}artist/${id}`, {\n    method: 'DELETE',\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  if (!response.ok)\n    throw new Error('Erreur lors de la suppression de l’artiste');\n  return await response.json();\n};\n\n/* ------------- ALBUM ------------- */\nconst getAlbums = async () => {\n  const response = await fetch(`${API_URL}album`);\n  if (!response.ok) throw new Error('Erreur lors du chargement des albums');\n  return await response.json();\n};\n\nconst getAllAlbums = async () => {\n  const response = await fetch(`${API_URL}album/all`);\n  if (!response.ok) throw new Error('Erreur lors du chargement des albums');\n  return await response.json();\n};\nconst getSingleAlbum = async (id) => {\n  const response = await fetch(`${API_URL}album/${id}`);\n  if (!response.ok)\n    throw new Error('Erreur lors de la récupération de l’album');\n  return await response.json();\n};\n\nconst createAlbum = async (albumData) => {\n  console.log(albumData);\n  const response = await fetch(`${API_URL}album`, {\n    method: 'POST',\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n    body: albumData,\n  });\n\n  if (!response.ok) throw new Error('Erreur lors de la création de l’album');\n  return await response.json();\n};\n\nconst editAlbum = async (id, albumData) => {\n  const formData = new FormData();\n  formData.append('title', albumData.title);\n  formData.append('artist', albumData.artistId);\n  formData.append('releaseDate', albumData.releaseDate);\n  formData.append('genre', albumData.genre);\n\n  if (albumData.picture && albumData.picture instanceof File) {\n    formData.append('albumImage', albumData.picture);\n  }\n\n  const response = await fetch(`${API_URL}album/${id}`, {\n    method: 'PUT',\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n    body: formData,\n  });\n\n  if (!response.ok)\n    throw new Error('Erreur lors de la modification de l’album');\n  return await response.json();\n};\n\nconst deleteAlbum = async (id) => {\n  const token = localStorage.getItem('userToken');\n  const response = await fetch(`${API_URL}album/${id}`, {\n    method: 'DELETE',\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  if (!response.ok) throw new Error('Erreur lors de la suppression de l’album');\n  return await response.json();\n};\n\n/* ------------- ADMIN ------------- */\nconst getAdmins = async () => {\n  const token = localStorage.getItem('userToken');\n  const response = await fetch(`${API_URL}admin`, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  if (!response.ok)\n    throw new Error(\n      'Erreur lors de la récupération des données des administrateurs'\n    );\n  return await response.json();\n};\n\nconst getSingleAdmin = async (id) => {\n  const token = localStorage.getItem('userToken');\n  const response = await fetch(`${API_URL}admin/${id}`, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  if (!response.ok)\n    throw new Error(\n      'Erreur lors de la récupération des données de l’administrateur'\n    );\n  return await response.json();\n};\n\nconst addAdmin = async (adminData) => {\n  const token = localStorage.getItem('userToken');\n  const response = await fetch(`${API_URL}admin`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(adminData),\n  });\n  if (!response.ok)\n    throw new Error('Erreur lors de l’ajout de l’administrateur');\n  return await response.json();\n};\n\nconst editAdmin = async (id, adminData) => {\n  const token = localStorage.getItem('userToken');\n  const response = await fetch(`${API_URL}admin/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(adminData),\n  });\n  if (!response.ok)\n    throw new Error('Erreur lors de la mise à jour de l’administrateur');\n  return await response.json();\n};\n\nconst deleteAdmin = async (id) => {\n  const token = localStorage.getItem('userToken');\n  const response = await fetch(`${API_URL}admin/${id}`, {\n    method: 'DELETE',\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  if (!response.ok)\n    throw new Error('Erreur lors de la suppression de l’administrateur');\n  return await response.json();\n};\n\nexport const apiService = {\n  /* ------------- AUDIO ------------- */\n  getAudios,\n  getSingleAudio,\n  getLastAudio,\n  editAudio,\n  uploadAudio,\n  deleteAudio,\n  streamAudio,\n  getStreamingCount,\n  /* ------------- ARTIST ------------- */\n  getArtists,\n  getLastArtist,\n  getSingleArtist,\n  editArtist,\n  createArtist,\n  deleteArtist,\n  /* ------------- ALBUM ------------- */\n  getAlbums,\n  getAllAlbums,\n  getSingleAlbum,\n  editAlbum,\n  createAlbum,\n  deleteAlbum,\n  /* ------------- ADMIN ------------- */\n  getAdmins,\n  getSingleAdmin,\n  addAdmin,\n  editAdmin,\n  deleteAdmin,\n};\n","import { useState, useEffect, lazy } from 'react';\nimport { apiService } from '../services/apiService';\nimport { notificationService } from '../services/notificationService';\nimport './index.css';\n\nimport Loader from '../components/Loader';\nconst CardList = lazy(() => import('../components/CardList'));\nconst Button = lazy(() => import('../components/Button'));\n\nconst AdminManagementView = () => {\n  const [admins, setAdmins] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const fecthAdmins = async () => {\n      setIsLoading(true);\n      try {\n        const fecthedAdmins = await apiService.getAdmins();\n        setAdmins((prevAdmins) => [\n          ...prevAdmins,\n          ...fecthedAdmins.map(transformAdmins),\n        ]);\n      } catch (error) {\n        console.error(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fecthAdmins();\n    notificationService.notify('Admins chargés avec succès', 'success');\n  }, []);\n\n  const transformAdmins = (admin) => ({\n    id: admin._id,\n    title: admin.username,\n    artist: admin.email,\n  });\n\n  return (\n    <div className=\"dashboard-list-view\">\n      <h2>Admin Dashboard</h2>\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <>\n          <CardList items={admins} type=\"admin\" />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default AdminManagementView;\n"],"names":["Loader","_jsxs","className","children","_jsx","API_URL","process","apiService","getAudios","async","response","fetch","concat","ok","Error","json","getSingleAudio","id","getLastAudio","editAudio","audioData","token","localStorage","getItem","method","headers","Authorization","body","JSON","stringify","uploadAudio","formData","FormData","append","audioFile","deleteAudio","streamAudio","getStreamingCount","getArtists","getLastArtist","getSingleArtist","editArtist","artistData","createArtist","deleteArtist","getAlbums","getAllAlbums","getSingleAlbum","editAlbum","albumData","title","artistId","releaseDate","genre","picture","File","createAlbum","console","log","deleteAlbum","getAdmins","getSingleAdmin","addAdmin","adminData","editAdmin","deleteAdmin","CardList","lazy","AdminManagementView","admins","setAdmins","useState","isLoading","setIsLoading","useEffect","fecthedAdmins","prevAdmins","map","transformAdmins","error","fecthAdmins","notificationService","notify","admin","_id","username","artist","email","_Fragment","items","type"],"sourceRoot":""}