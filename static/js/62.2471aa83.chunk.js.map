{"version":3,"file":"static/js/62.2471aa83.chunk.js","mappings":"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","sources":["components/CardList/index.js"],"sourcesContent":["import React, { useState, useMemo, lazy, Suspense } from 'react';\nimport { notificationService } from '../../services/notificationService';\nimport { apiService } from '../../services/apiService';\nimport { addAlbum, addArtist, addAudio } from '../../services/indexerDBService';\nimport {\n  transformAlbums,\n  transformAudio,\n  transformArtist,\n} from '../../services/transformService';\nimport PropTypes from 'prop-types';\n\nimport Loader from '../Loader';\nconst Card = lazy(() => import('../Card'));\nconst CardAdd = lazy(() => import('../CardAdd'));\nconst PageControls = lazy(() => import('../PageControls'));\nconst Search = lazy(() => import('../Search'));\n\nconst ITEMS_PER_PAGE = 4;\n\nconst CardList = ({ items, type, onRefresh }) => {\n  const [currentPage, setCurrentPage] = useState(1);\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const filteredItems = useMemo(() => {\n    return items.filter((item) => {\n      const titleMatch = item.title\n        ? item.title.toLowerCase().includes(searchQuery.toLowerCase())\n        : false;\n      const artistMatch = item.artist\n        ? item.artist.toLowerCase().includes(searchQuery.toLowerCase())\n        : false;\n      return titleMatch || artistMatch;\n    });\n  }, [items, searchQuery]);\n\n  const totalPages = Math.ceil(filteredItems.length / ITEMS_PER_PAGE);\n  const currentItems = useMemo(() => {\n    const start = (currentPage - 1) * ITEMS_PER_PAGE;\n    return filteredItems.slice(start, start + ITEMS_PER_PAGE);\n  }, [currentPage, filteredItems]);\n\n  const renderListItems = useMemo(\n    () => (\n      <Suspense fallback={<Loader />}>\n        {currentItems.map((item) => (\n          <Card key={item._id} data={item} type={type} onRefresh={onRefresh} />\n        ))}\n      </Suspense>\n    ),\n    [currentItems, type]\n  );\n\n  const goToPreviousPage = () =>\n    setCurrentPage((page) => Math.max(page - 1, 1));\n  const goToNextPage = () =>\n    setCurrentPage((page) => Math.min(page + 1, totalPages));\n\n  const handleSearchChange = (query) => {\n    setSearchQuery(query);\n    setCurrentPage(1);\n  };\n\n  const handleAddItem = async (newData, type) => {\n    try {\n      console.log('newData :', newData);\n      switch (type) {\n        case 'artist':\n          await apiService.createArtist(newData);\n          const newArtist = await apiService.getLastArtist();\n          const artistToAdd = await transformArtist(newArtist);\n          await addArtist(artistToAdd);\n          break;\n        case 'song':\n          await apiService.uploadAudio(newData);\n          const newAudio = await apiService.getLastAudio();\n          const audioToAdd = await transformAudio(\n            newAudio.audios[0],\n            newAudio,\n            newAudio.name\n          );\n          await addAudio(audioToAdd);\n          break;\n        case 'album':\n          await apiService.createAlbum(newData);\n          const newAlbum = await apiService.getLastAlbum();\n          const albumToAdd = await transformAlbums(newAlbum);\n          await addAlbum(albumToAdd);\n          break;\n        case 'admin':\n          await apiService.addAdmin(newData);\n          break;\n      }\n      notificationService.notify('Ajout réussie', 'success');\n      onRefresh();\n    } catch (error) {\n      notificationService.notify('Erreur', 'warning');\n      console.error(\"Erreur lors de l'ajout de l'élément :\", error);\n    }\n  };\n\n  return (\n    <div>\n      <div>\n        <Search onSearchChange={handleSearchChange} />\n      </div>\n      <PageControls\n        currentPage={currentPage}\n        totalPages={totalPages}\n        onPrevious={goToPreviousPage}\n        onNext={goToNextPage}\n      />\n      {renderListItems}\n      <CardAdd type={type} onAdd={handleAddItem} />\n      <PageControls\n        currentPage={currentPage}\n        totalPages={totalPages}\n        onPrevious={goToPreviousPage}\n        onNext={goToNextPage}\n      />\n    </div>\n  );\n};\n\nCardList.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.object).isRequired,\n  type: PropTypes.oneOf(['artist', 'song', 'album', 'admin']).isRequired,\n};\n\nexport default CardList;\n"],"names":["Card","lazy","CardAdd","PageControls","Search","_ref","items","type","onRefresh","currentPage","setCurrentPage","useState","searchQuery","setSearchQuery","filteredItems","useMemo","filter","item","titleMatch","title","toLowerCase","includes","artistMatch","artist","totalPages","Math","ceil","length","currentItems","start","slice","renderListItems","_jsx","Suspense","fallback","Loader","children","map","data","_id","goToPreviousPage","page","max","goToNextPage","min","_jsxs","onSearchChange","query","onPrevious","onNext","onAdd","async","newData","console","log","apiService","createArtist","newArtist","getLastArtist","artistToAdd","transformArtist","addArtist","uploadAudio","newAudio","getLastAudio","audioToAdd","transformAudio","audios","name","addAudio","createAlbum","newAlbum","getLastAlbum","albumToAdd","transformAlbums","addAlbum","addAdmin","notificationService","notify","error"],"sourceRoot":""}