{"version":3,"file":"static/js/54.ef643f2b.chunk.js","mappings":"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","sources":["components/Modal/index.js"],"sourcesContent":["import React, { Suspense, useState, useEffect, lazy, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { getAlbums, getArtists } from '../../services/indexerDBService';\nimport './index.css';\n\nimport Loader from '../Loader';\nconst Input = lazy(() => import('../Input'));\nconst Button = lazy(() => import('../Button'));\nconst Select = lazy(() => import('../Select'));\nconst YearPicker = lazy(() => import('../YearPicker'));\n\nconst Modal = ({ isOpen, onClose, data, onSubmit, type, actionType }) => {\n  const [formData, setFormData] = useState(actionType === 'add' ? {} : data);\n  const [artists, setArtists] = useState([]);\n  const [albums, setAlbums] = useState([]);\n\n  useEffect(() => {\n    if (actionType !== 'delete') {\n      const fetchAlbums = async () => {\n        try {\n          let albumData = await getAlbums();\n          setAlbums(albumData);\n        } catch (error) {\n          console.error(error);\n        }\n      };\n      const fetchArtists = async () => {\n        try {\n          let artistData = await getArtists();\n          setArtists(artistData);\n        } catch (error) {\n          console.error(error);\n        }\n      };\n      fetchArtists();\n      fetchAlbums();\n      setFormData(data);\n    }\n  }, [data, actionType]);\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData((prevData) => ({\n      ...prevData,\n      [name]: value,\n    }));\n  };\n\n  const handleChangeFile = (e) => {\n    const { name, files } = e.target;\n    if (files && files[0]) {\n      setFormData((prevData) => ({\n        ...prevData,\n        [name]: files[0],\n      }));\n    } else {\n      setFormData((prevData) => ({\n        ...prevData,\n        [name]: null,\n      }));\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    onSubmit(formData);\n  };\n\n  const renderContent = () => {\n    if (actionType === 'delete') {\n      return (\n        <>\n          <p>Êtes-vous sûr de vouloir supprimer cet élément ?</p>\n        </>\n      );\n    } else {\n      console.log(formData);\n      switch (type) {\n        case 'artist':\n          return (\n            <>\n              <Input\n                label=\"Artist Name\"\n                name=\"title\"\n                value={formData.title || ''}\n                onChange={handleChange}\n              />\n            </>\n          );\n        case 'album':\n          return (\n            <>\n              <Input\n                label=\"Titre\"\n                name=\"title\"\n                value={formData.title || ''}\n                onChange={handleChange}\n              />\n              <Select\n                label=\"Artiste\"\n                name=\"artistId\"\n                options={artists}\n                value={formData.artistId || ''}\n                onChange={(selectedArtistId) => {\n                  setFormData((prevData) => ({\n                    ...prevData,\n                    artistId: selectedArtistId,\n                  }));\n                }}\n              />\n              <Input\n                type=\"file\"\n                label=\"Couverture\"\n                name=\"picture\"\n                onChange={handleChangeFile}\n                accept=\"image/png, image/jpeg\"\n              />\n              <YearPicker\n                label=\"Année de sortie\"\n                name=\"releaseYear\"\n                value={\n                  formData.releaseDate instanceof Date\n                    ? formData.releaseDate\n                    : new Date(formData.releaseDate)\n                }\n                onChange={(date) => {\n                  setFormData({\n                    ...formData,\n                    releaseDate: date,\n                  });\n                }}\n                startYear={1900}\n                endYear={new Date().getFullYear()}\n              />\n              <Input\n                label=\"Genre\"\n                name=\"genre\"\n                value={formData.genre || ''}\n                onChange={handleChange}\n              />\n            </>\n          );\n        case 'song':\n          return (\n            <>\n              <Input\n                label=\"Song Title\"\n                name=\"title\"\n                value={formData.title || ''}\n                onChange={handleChange}\n              />\n              <Select\n                label=\"Album\"\n                name=\"albumId\"\n                options={albums}\n                value={formData.albumId || ''}\n                onChange={(selectedAlbumId) => {\n                  setFormData((prevData) => ({\n                    ...prevData,\n                    albumId: selectedAlbumId,\n                  }));\n                }}\n              />\n              {actionType === 'add' && (\n                <Input\n                  type=\"file\"\n                  label=\"Audio\"\n                  name=\"audio\"\n                  onChange={handleChangeFile}\n                  accept=\".mp3, .wav, .ogg, .m4a\"\n                />\n              )}\n            </>\n          );\n        case 'admin':\n          return (\n            <>\n              <Input\n                type=\"email\"\n                label=\"Email\"\n                name=\"artist\"\n                value={formData.artist || ''}\n                onChange={handleChange}\n              />\n              <Input\n                type=\"text\"\n                label=\"Identifiant\"\n                name=\"title\"\n                value={formData.title || ''}\n                onChange={handleChange}\n              />\n              <Input\n                type=\"password\"\n                label=\"Confirmer votre mot de passe\"\n                name=\"password\"\n                value={formData.password || ''}\n                onChange={handleChange}\n                required={true}\n              />\n            </>\n          );\n        default:\n          return <p>Action impossible</p>;\n      }\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <Suspense fallback={<Loader />}>\n      <div className=\"modal-backdrop\">\n        <div className=\"modal-content\">\n          <form onSubmit={handleSubmit}>\n            {renderContent()}\n            <Button type=\"submit\" label=\"Valider\" />\n            <Button type=\"button\" label=\"Annuler\" onClick={onClose} />\n          </form>\n        </div>\n      </div>\n    </Suspense>\n  );\n};\n\nModal.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n  data: PropTypes.object,\n  onSubmit: PropTypes.func.isRequired,\n  type: PropTypes.oneOf(['artist', 'song', 'album', 'admin']).isRequired,\n  actionType: PropTypes.oneOf(['update', 'delete', 'add']).isRequired,\n};\n\nexport default memo(Modal);\n"],"names":["Input","lazy","Button","Select","YearPicker","Modal","_ref","isOpen","onClose","data","onSubmit","type","actionType","formData","setFormData","useState","artists","setArtists","albums","setAlbums","useEffect","fetchAlbums","async","albumData","getAlbums","error","console","artistData","getArtists","fetchArtists","handleChange","e","name","value","target","prevData","handleChangeFile","files","_jsx","Suspense","fallback","Loader","children","className","_jsxs","preventDefault","renderContent","_Fragment","log","label","title","onChange","options","artistId","selectedArtistId","accept","releaseDate","Date","date","startYear","endYear","getFullYear","genre","albumId","selectedAlbumId","artist","password","required","onClick","memo"],"sourceRoot":""}