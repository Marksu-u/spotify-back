{"version":3,"file":"static/js/433.a9ae3d95.chunk.js","mappings":"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","sources":["components/Loader/index.js","services/apiService.js","services/indexerDBService.js","views/AlbumDashboardView.js"],"sourcesContent":["import React from 'react';\nimport './index.css';\n\nconst Loader = () => (\n  <div className=\"loader-container\">\n    <div className=\"loader\"></div>\n    <p className=\"loader-text\">\n      Le premier chargement des données peut prendre de 10 à 30 secondes. Si\n      cela prend trop de temps, n'hésitez pas à contacter notre support.\n    </p>\n  </div>\n);\n\nexport default Loader;\n","const API_URL = process.env.REACT_APP_API_URL;\n\n/* ------------- AUDIO ------------- */\nconst getAudios = async () => {\n  const response = await fetch(`${API_URL}audio`);\n  if (!response.ok)\n    throw new Error('Erreur lors de la récupération de l’audio');\n  return await response.json();\n};\n\nconst getSingleAudio = async (id) => {\n  const response = await fetch(`${API_URL}audio/${id}`);\n  if (!response.ok)\n    throw new Error('Erreur lors de la récupération de l’audio');\n  return await response.json();\n};\n\nconst getLastAudio = async (id) => {\n  const response = await fetch(`${API_URL}audio/last`);\n  if (!response.ok)\n    throw new Error('Erreur lors de la récupération de l’audio');\n  return await response.json();\n};\n\nconst editAudio = async (id, audioData) => {\n  const token = localStorage.getItem('userToken');\n  const response = await fetch(`${API_URL}audio/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(audioData),\n  });\n  if (!response.ok)\n    throw new Error('Erreur lors de la modification de l’audio');\n  return await response.json();\n};\n\nconst uploadAudio = async (audioFile) => {\n  const token = localStorage.getItem('userToken');\n  const formData = new FormData();\n  formData.append('audioFile', audioFile);\n\n  const response = await fetch(`${API_URL}audio/upload`, {\n    method: 'POST',\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n    body: formData,\n  });\n  if (!response.ok) throw new Error('Erreur lors de l’upload de l’audio');\n  return await response.json();\n};\n\nconst deleteAudio = async (id) => {\n  const token = localStorage.getItem('userToken');\n  const response = await fetch(`${API_URL}audio/${id}`, {\n    method: 'DELETE',\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  if (!response.ok) throw new Error('Erreur lors de la suppression de l’audio');\n  return await response.json();\n};\n\nconst streamAudio = async (id) => {\n  const response = await fetch(`${API_URL}audio/stream/${id}`);\n  if (!response.ok) throw new Error('Erreur lors du streaming de l’audio');\n  return await response.json();\n};\n\nconst getStreamingCount = async (id) => {\n  const response = await fetch(`${API_URL}audio/streamed/${id}`);\n  if (!response.ok)\n    throw new Error('Erreur lors de la récupération du nombre de stream');\n  return await response.json();\n};\n\n/* ------------- ARTIST ------------- */\nconst getArtists = async () => {\n  const response = await fetch(`${API_URL}artist`);\n  if (!response.ok) throw new Error('Erreur lors du chargement des artistes');\n  return await response.json();\n};\n\nexport const getLastArtist = async () => {\n  const response = await fetch(`${API_URL}artist/last`);\n  const data = await response.json();\n  return data;\n};\n\nconst getSingleArtist = async (id) => {\n  const response = await fetch(`${API_URL}artist/${id}`);\n  if (!response.ok)\n    throw new Error('Erreur lors de la récupération de l’artiste');\n  return await response.json();\n};\n\nconst editArtist = async (artistData) => {\n  const token = localStorage.getItem('userToken');\n  const id = artistData.id;\n  const response = await fetch(`${API_URL}artist/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(artistData),\n  });\n  if (!response.ok)\n    throw new Error('Erreur lors de la modification de l’artiste');\n  return await response.json();\n};\n\nconst createArtist = async (artistData) => {\n  const token = localStorage.getItem('userToken');\n  const response = await fetch(`${API_URL}artist`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(artistData),\n  });\n  if (!response.ok) throw new Error('Erreur lors de la création de l’artiste');\n  return await response.json();\n};\n\nconst deleteArtist = async (id) => {\n  const token = localStorage.getItem('userToken');\n  const response = await fetch(`${API_URL}artist/${id}`, {\n    method: 'DELETE',\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  if (!response.ok)\n    throw new Error('Erreur lors de la suppression de l’artiste');\n  return await response.json();\n};\n\n/* ------------- ALBUM ------------- */\nconst getAlbums = async () => {\n  const response = await fetch(`${API_URL}album`);\n  if (!response.ok) throw new Error('Erreur lors du chargement des albums');\n  return await response.json();\n};\n\nconst getAllAlbums = async () => {\n  const response = await fetch(`${API_URL}album/all`);\n  if (!response.ok) throw new Error('Erreur lors du chargement des albums');\n  return await response.json();\n};\nconst getSingleAlbum = async (id) => {\n  const response = await fetch(`${API_URL}album/${id}`);\n  if (!response.ok)\n    throw new Error('Erreur lors de la récupération de l’album');\n  return await response.json();\n};\n\nconst createAlbum = async (albumData) => {\n  console.log(albumData);\n  const response = await fetch(`${API_URL}album`, {\n    method: 'POST',\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n    body: albumData,\n  });\n\n  if (!response.ok) throw new Error('Erreur lors de la création de l’album');\n  return await response.json();\n};\n\nconst editAlbum = async (id, albumData) => {\n  const formData = new FormData();\n  formData.append('title', albumData.title);\n  formData.append('artist', albumData.artistId);\n  formData.append('releaseDate', albumData.releaseDate);\n  formData.append('genre', albumData.genre);\n\n  if (albumData.picture && albumData.picture instanceof File) {\n    formData.append('albumImage', albumData.picture);\n  }\n\n  const response = await fetch(`${API_URL}album/${id}`, {\n    method: 'PUT',\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n    body: formData,\n  });\n\n  if (!response.ok)\n    throw new Error('Erreur lors de la modification de l’album');\n  return await response.json();\n};\n\nconst deleteAlbum = async (id) => {\n  const token = localStorage.getItem('userToken');\n  const response = await fetch(`${API_URL}album/${id}`, {\n    method: 'DELETE',\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  if (!response.ok) throw new Error('Erreur lors de la suppression de l’album');\n  return await response.json();\n};\n\n/* ------------- ADMIN ------------- */\nconst getAdmins = async () => {\n  const token = localStorage.getItem('userToken');\n  const response = await fetch(`${API_URL}admin`, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  if (!response.ok)\n    throw new Error(\n      'Erreur lors de la récupération des données des administrateurs'\n    );\n  return await response.json();\n};\n\nconst getSingleAdmin = async (id) => {\n  const token = localStorage.getItem('userToken');\n  const response = await fetch(`${API_URL}admin/${id}`, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  if (!response.ok)\n    throw new Error(\n      'Erreur lors de la récupération des données de l’administrateur'\n    );\n  return await response.json();\n};\n\nconst addAdmin = async (adminData) => {\n  const token = localStorage.getItem('userToken');\n  const response = await fetch(`${API_URL}admin`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(adminData),\n  });\n  if (!response.ok)\n    throw new Error('Erreur lors de l’ajout de l’administrateur');\n  return await response.json();\n};\n\nconst editAdmin = async (id, adminData) => {\n  const token = localStorage.getItem('userToken');\n  const response = await fetch(`${API_URL}admin/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(adminData),\n  });\n  if (!response.ok)\n    throw new Error('Erreur lors de la mise à jour de l’administrateur');\n  return await response.json();\n};\n\nconst deleteAdmin = async (id) => {\n  const token = localStorage.getItem('userToken');\n  const response = await fetch(`${API_URL}admin/${id}`, {\n    method: 'DELETE',\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  if (!response.ok)\n    throw new Error('Erreur lors de la suppression de l’administrateur');\n  return await response.json();\n};\n\nexport const apiService = {\n  /* ------------- AUDIO ------------- */\n  getAudios,\n  getSingleAudio,\n  getLastAudio,\n  editAudio,\n  uploadAudio,\n  deleteAudio,\n  streamAudio,\n  getStreamingCount,\n  /* ------------- ARTIST ------------- */\n  getArtists,\n  getLastArtist,\n  getSingleArtist,\n  editArtist,\n  createArtist,\n  deleteArtist,\n  /* ------------- ALBUM ------------- */\n  getAlbums,\n  getAllAlbums,\n  getSingleAlbum,\n  editAlbum,\n  createAlbum,\n  deleteAlbum,\n  /* ------------- ADMIN ------------- */\n  getAdmins,\n  getSingleAdmin,\n  addAdmin,\n  editAdmin,\n  deleteAdmin,\n};\n","const openDatabase = () => {\n  return new Promise((resolve, reject) => {\n    const request = indexedDB.open('mk-bospot', 1);\n\n    request.onupgradeneeded = (event) => {\n      const db = event.target.result;\n      db.createObjectStore('audios', { keyPath: '_id' });\n      db.createObjectStore('artists', { keyPath: '_id' });\n      db.createObjectStore('albums', { keyPath: '_id' });\n    };\n\n    request.onerror = (event) => {\n      reject(`Database error: ${event.target.errorCode}`);\n    };\n\n    request.onsuccess = (event) => {\n      resolve(event.target.result);\n    };\n  });\n};\n\nexport const saveAudios = async (audios) => {\n  const db = await openDatabase();\n  const transaction = db.transaction('audios', 'readwrite');\n  const store = transaction.objectStore('audios');\n\n  for (let audio of audios) {\n    store.put(audio);\n  }\n};\n\nexport const getAudios = async () => {\n  const db = await openDatabase();\n  const transaction = db.transaction('audios', 'readonly');\n  const store = transaction.objectStore('audios');\n\n  return new Promise((resolve, reject) => {\n    const request = store.getAll();\n\n    request.onerror = () => {\n      reject('Failed to retrieve data from database.');\n    };\n\n    request.onsuccess = () => {\n      resolve(request.result);\n    };\n  });\n};\n\nexport const saveArtists = async (artists) => {\n  const db = await openDatabase();\n  const transaction = db.transaction('artists', 'readwrite');\n  const store = transaction.objectStore('artists');\n\n  for (let artist of artists) {\n    store.put(artist);\n  }\n};\n\nexport const getArtists = async () => {\n  const db = await openDatabase();\n  const transaction = db.transaction('artists', 'readonly');\n  const store = transaction.objectStore('artists');\n\n  return new Promise((resolve, reject) => {\n    const request = store.getAll();\n\n    request.onerror = () => {\n      reject('Failed to retrieve data from database.');\n    };\n\n    request.onsuccess = () => {\n      resolve(request.result);\n    };\n  });\n};\n\nexport const addArtist = async (artist) => {\n  const db = await openDatabase();\n  const transaction = db.transaction('artists', 'readwrite');\n  const store = transaction.objectStore('artists');\n  store.add(artist);\n};\n\nexport const saveAlbums = async (albums) => {\n  const db = await openDatabase();\n  const transaction = db.transaction('albums', 'readwrite');\n  const store = transaction.objectStore('albums');\n\n  for (let album of albums) {\n    store.put(album);\n  }\n};\n\nexport const getAlbums = async () => {\n  const db = await openDatabase();\n  const transaction = db.transaction('albums', 'readonly');\n  const store = transaction.objectStore('albums');\n\n  return new Promise((resolve, reject) => {\n    const request = store.getAll();\n\n    request.onerror = () => {\n      reject('Failed to retrieve data from database.');\n    };\n\n    request.onsuccess = () => {\n      resolve(request.result);\n    };\n  });\n};\n","import { useState, useEffect, lazy } from 'react';\nimport notFound from '../assets/404.png';\nimport { saveAlbums, getAlbums } from '../services/indexerDBService';\nimport { apiService } from '../services/apiService';\nimport './index.css';\n\nimport Loader from '../components/Loader';\nconst CardList = lazy(() => import('../components/CardList'));\n\nconst transformAlbums = async (album) => ({\n  _id: album._id,\n  title: album.title,\n  artist: album.artist.name,\n  artistId: album.artist._id,\n  releaseDate: album.releaseDate,\n  genre: album.genre.join(', '),\n  picture: convertBufferToBase64(album.picture[0]),\n});\n\nconst convertBufferToBase64 = (picture) => {\n  if (picture?.data?.data) {\n    const buffer = new Uint8Array(picture.data.data);\n    let binary = '';\n    buffer.forEach((b) => (binary += String.fromCharCode(b)));\n    return `data:${picture.format};base64,${window.btoa(binary)}`;\n  }\n  return notFound;\n};\n\nconst AlbumDashboardView = () => {\n  const [albums, setAlbums] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchAlbums = async () => {\n      setIsLoading(true);\n\n      try {\n        let albumData = await getAlbums();\n\n        if (!albumData.length) {\n          const fetchedAlbums = await apiService.getAlbums();\n          const transformedAlbums = await Promise.all(\n            fetchedAlbums.map(transformAlbums)\n          );\n          await saveAlbums(transformedAlbums);\n          albumData = transformedAlbums;\n        }\n\n        setAlbums(albumData);\n      } catch (error) {\n        console.error(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchAlbums();\n  }, []);\n\n  return (\n    <div className=\"dashboard-list-view\">\n      <h2>Albums Dashboard</h2>\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <>\n          <CardList items={albums} type=\"album\" />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default AlbumDashboardView;\n"],"names":["Loader","_jsxs","className","children","_jsx","API_URL","process","apiService","getAudios","async","response","fetch","concat","ok","Error","json","getSingleAudio","id","getLastAudio","editAudio","audioData","token","localStorage","getItem","method","headers","Authorization","body","JSON","stringify","uploadAudio","formData","FormData","append","audioFile","deleteAudio","streamAudio","getStreamingCount","getArtists","getLastArtist","getSingleArtist","editArtist","artistData","createArtist","deleteArtist","getAlbums","getAllAlbums","getSingleAlbum","editAlbum","albumData","title","artistId","releaseDate","genre","picture","File","createAlbum","console","log","deleteAlbum","getAdmins","getSingleAdmin","addAdmin","adminData","editAdmin","deleteAdmin","openDatabase","Promise","resolve","reject","request","indexedDB","open","onupgradeneeded","event","db","target","result","createObjectStore","keyPath","onerror","errorCode","onsuccess","saveAudios","store","transaction","objectStore","audio","audios","put","getAll","saveArtists","artist","artists","addArtist","add","saveAlbums","album","albums","CardList","lazy","transformAlbums","_id","name","join","convertBufferToBase64","_picture$data","data","buffer","Uint8Array","binary","forEach","b","String","fromCharCode","format","window","btoa","notFound","AlbumDashboardView","setAlbums","useState","isLoading","setIsLoading","useEffect","length","fetchedAlbums","transformedAlbums","all","map","error","fetchAlbums","_Fragment","items","type"],"sourceRoot":""}