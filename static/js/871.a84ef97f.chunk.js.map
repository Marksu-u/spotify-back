{"version":3,"file":"static/js/871.a84ef97f.chunk.js","mappings":"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","sources":["components/Loader/index.js","services/apiService.js","views/ArtistDashboardView.js"],"sourcesContent":["import React from 'react';\nimport './index.css';\n\nconst Loader = () => (\n  <div className=\"loader-container\">\n    <div className=\"loader\"></div>\n  </div>\n);\n\nexport default Loader;\n","const API_URL = process.env.REACT_APP_API_URL;\n\n/* ------------- AUDIO ------------- */\nconst getAudios = async (page, limit) => {\n  const url = `${API_URL}audio?page=${page}&limit=${limit}`;\n  const response = await fetch(url);\n  if (!response.ok) throw new Error('Erreur lors du chargement des audios');\n  return await response.json();\n};\n\nconst getSingleAudio = async (id) => {\n  const response = await fetch(`${API_URL}audio/${id}`);\n  if (!response.ok)\n    throw new Error('Erreur lors de la récupération de l’audio');\n  return await response.json();\n};\n\nconst editAudio = async (id, audioData) => {\n  const response = await fetch(`${API_URL}audio/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(audioData),\n  });\n  if (!response.ok)\n    throw new Error('Erreur lors de la modification de l’audio');\n  return await response.json();\n};\n\nconst uploadAudio = async (audioFile) => {\n  const formData = new FormData();\n  formData.append('audioFile', audioFile);\n\n  const response = await fetch(`${API_URL}audio/upload`, {\n    method: 'POST',\n    body: formData,\n  });\n  if (!response.ok) throw new Error('Erreur lors de l’upload de l’audio');\n  return await response.json();\n};\n\nconst deleteAudio = async (id) => {\n  const response = await fetch(`${API_URL}audio/${id}`, {\n    method: 'DELETE',\n  });\n  if (!response.ok) throw new Error('Erreur lors de la suppression de l’audio');\n  return await response.json();\n};\n\nconst streamAudio = async (id) => {\n  const response = await fetch(`${API_URL}audio/stream/${id}`);\n  if (!response.ok) throw new Error('Erreur lors du streaming de l’audio');\n  return await response.json();\n};\n\nconst getStreamingCount = async (id) => {\n  const response = await fetch(`${API_URL}audio/streamed/${id}`);\n  if (!response.ok)\n    throw new Error('Erreur lors de la récupération du nombre de stream');\n  return await response.json();\n};\n\n/* ------------- ARTIST ------------- */\nconst getArtists = async (page, limit) => {\n  const response = await fetch(`${API_URL}artist/?page=${page}&limit=${limit}`);\n  if (!response.ok) throw new Error('Erreur lors du chargement des artistes');\n  return await response.json();\n};\n\nconst getSingleArtist = async (id) => {\n  const response = await fetch(`${API_URL}artist/${id}`);\n  if (!response.ok)\n    throw new Error('Erreur lors de la récupération de l’artiste');\n  return await response.json();\n};\n\nconst editArtist = async (id, artistData) => {\n  const response = await fetch(`${API_URL}artist/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(artistData),\n  });\n  if (!response.ok)\n    throw new Error('Erreur lors de la modification de l’artiste');\n  return await response.json();\n};\n\nconst createArtist = async (artistData) => {\n  const response = await fetch(`${API_URL}artist`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(artistData),\n  });\n  if (!response.ok) throw new Error('Erreur lors de la création de l’artiste');\n  return await response.json();\n};\n\nconst deleteArtist = async (id) => {\n  const response = await fetch(`${API_URL}artist/${id}`, {\n    method: 'DELETE',\n  });\n  if (!response.ok)\n    throw new Error('Erreur lors de la suppression de l’artiste');\n  return await response.json();\n};\n\n/* ------------- ALBUM ------------- */\nconst getAlbums = async (page, limit) => {\n  const response = await fetch(`${API_URL}album/?page=${page}&limit=${limit}`);\n  if (!response.ok) throw new Error('Erreur lors du chargement des albums');\n  return await response.json();\n};\n\nconst getSingleAlbum = async (id) => {\n  const response = await fetch(`${API_URL}album/${id}`);\n  if (!response.ok)\n    throw new Error('Erreur lors de la récupération de l’album');\n  return await response.json();\n};\n\nconst createAlbum = async (albumData) => {\n  const response = await fetch(`${API_URL}album`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(albumData),\n  });\n  if (!response.ok) throw new Error('Erreur lors de la création de l’album');\n  return await response.json();\n};\n\nconst editAlbum = async (id, albumData) => {\n  const response = await fetch(`${API_URL}album/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(albumData),\n  });\n  if (!response.ok)\n    throw new Error('Erreur lors de la modification de l’album');\n  return await response.json();\n};\n\nconst deleteAlbum = async (id) => {\n  const response = await fetch(`${API_URL}album/${id}`, {\n    method: 'DELETE',\n  });\n  if (!response.ok) throw new Error('Erreur lors de la suppression de l’album');\n  return await response.json();\n};\n\n/* ------------- ADMIN ------------- */\nconst getAdmins = async (page, limit) => {\n  const token = localStorage.getItem('userToken');\n  const response = await fetch(`${API_URL}admin/?page=${page}&limit=${limit}`, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  if (!response.ok)\n    throw new Error(\n      'Erreur lors de la récupération des données des administrateurs'\n    );\n  return await response.json();\n};\n\nconst getSingleAdmin = async (id) => {\n  const token = localStorage.getItem('userToken');\n  const response = await fetch(`${API_URL}admin/${id}`, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  if (!response.ok)\n    throw new Error(\n      'Erreur lors de la récupération des données de l’administrateur'\n    );\n  return await response.json();\n};\n\nconst addAdmin = async (adminData) => {\n  const token = localStorage.getItem('userToken');\n  const response = await fetch(`${API_URL}admin`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(adminData),\n  });\n  if (!response.ok)\n    throw new Error('Erreur lors de l’ajout de l’administrateur');\n  return await response.json();\n};\n\nconst editAdmin = async (id, adminData) => {\n  const token = localStorage.getItem('userToken');\n  const response = await fetch(`${API_URL}admin/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(adminData),\n  });\n  if (!response.ok)\n    throw new Error('Erreur lors de la mise à jour de l’administrateur');\n  return await response.json();\n};\n\nconst deleteAdmin = async (id) => {\n  const token = localStorage.getItem('userToken');\n  const response = await fetch(`${API_URL}admin/${id}`, {\n    method: 'DELETE',\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  if (!response.ok)\n    throw new Error('Erreur lors de la suppression de l’administrateur');\n  return await response.json();\n};\n\nexport const apiService = {\n  /* ------------- AUDIO ------------- */\n  getAudios,\n  getSingleAudio,\n  editAudio,\n  uploadAudio,\n  deleteAudio,\n  streamAudio,\n  getStreamingCount,\n  /* ------------- ARTIST ------------- */\n  getArtists,\n  getSingleArtist,\n  editArtist,\n  createArtist,\n  deleteArtist,\n  /* ------------- ALBUM ------------- */\n  getAlbums,\n  getSingleAlbum,\n  editAlbum,\n  createAlbum,\n  deleteAlbum,\n  /* ------------- ADMIN ------------- */\n  getAdmins,\n  getSingleAdmin,\n  addAdmin,\n  editAdmin,\n  deleteAdmin,\n};\n","import React, { useState, useEffect, lazy } from 'react';\nimport { apiService } from '../services/apiService';\nimport { notificationService } from '../services/notificationService';\nimport './index.css';\n\nimport Loader from '../components/Loader';\nconst CardList = lazy(() => import('../components/CardList'));\nconst Button = lazy(() => import('../components/Button'));\n\nconst ArtistDashboardView = () => {\n  const [artists, setArtists] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [hasMore, setHasMore] = useState(true);\n  const [itemsPerPage, setItemsPerPage] = useState(16);\n\n  useEffect(() => {\n    const fetchArtists = async () => {\n      setIsLoading(true);\n      try {\n        const fetchedArtists = await apiService.getArtists(\n          currentPage,\n          itemsPerPage\n        );\n\n        if (fetchedArtists.length > 0) {\n          setArtists((prevArtists) => [\n            ...prevArtists,\n            ...fetchedArtists.map((artist) => ({\n              id: artist._id,\n              title: artist.name,\n            })),\n          ]);\n          setHasMore(fetchedArtists.length === itemsPerPage);\n        } else {\n          setHasMore(false);\n        }\n      } catch (error) {\n        console.error(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchArtists();\n  }, [currentPage, itemsPerPage]);\n\n  const loadMoreArtists = () => {\n    if (hasMore) {\n      setCurrentPage((current) => current + 1);\n    }\n  };\n\n  return (\n    <div className=\"dashboard-list-view \">\n      <h2>Artist Dashboard</h2>\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <>\n          {hasMore && <Button label=\"Charger plus\" onClick={loadMoreArtists} />}\n          <CardList items={artists} type=\"artist\" />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default ArtistDashboardView;\n"],"names":["Loader","_jsx","className","children","API_URL","process","apiService","getAudios","async","page","limit","url","concat","response","fetch","ok","Error","json","getSingleAudio","id","editAudio","audioData","method","headers","body","JSON","stringify","uploadAudio","formData","FormData","append","audioFile","deleteAudio","streamAudio","getStreamingCount","getArtists","getSingleArtist","editArtist","artistData","createArtist","deleteArtist","getAlbums","getSingleAlbum","editAlbum","albumData","createAlbum","deleteAlbum","getAdmins","token","localStorage","getItem","Authorization","getSingleAdmin","addAdmin","adminData","editAdmin","deleteAdmin","CardList","lazy","Button","ArtistDashboardView","artists","setArtists","useState","isLoading","setIsLoading","currentPage","setCurrentPage","hasMore","setHasMore","itemsPerPage","setItemsPerPage","useEffect","fetchedArtists","length","prevArtists","map","artist","_id","title","name","error","console","fetchArtists","_jsxs","_Fragment","label","onClick","loadMoreArtists","current","items","type"],"sourceRoot":""}