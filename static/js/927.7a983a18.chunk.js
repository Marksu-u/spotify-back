"use strict";(self.webpackChunkspotify_back=self.webpackChunkspotify_back||[]).push([[927,62],{927:(r,e,t)=>{t.r(e),t.d(e,{default:()=>m});var o=t(791),a=t(907),s=t(183),n=t(144),c=t(943),i=t(835),l=t(184);const u=(0,o.lazy)((()=>t.e(828).then(t.bind(t,828)))),d=(0,o.lazy)((()=>t.e(839).then(t.bind(t,839)))),w=(0,o.lazy)((()=>t.e(275).then(t.bind(t,275)))),b=(0,o.lazy)((()=>t.e(320).then(t.bind(t,320)))),m=r=>{let{items:e,type:t,onRefresh:m}=r;const[p,y]=(0,o.useState)(1),[g,h]=(0,o.useState)(""),j=(0,o.useMemo)((()=>e.filter((r=>{const e=!!r.title&&r.title.toLowerCase().includes(g.toLowerCase()),t=!!r.artist&&r.artist.toLowerCase().includes(g.toLowerCase());return e||t}))),[e,g]),f=Math.ceil(j.length/4),S=(0,o.useMemo)((()=>{const r=4*(p-1);return j.slice(r,r+4)}),[p,j]),A=(0,o.useMemo)((()=>(0,l.jsx)(o.Suspense,{fallback:(0,l.jsx)(i.Z,{}),children:S.map((r=>(0,l.jsx)(u,{data:r,type:t,onRefresh:m},r._id)))})),[S,t]),P=()=>y((r=>Math.max(r-1,1))),E=()=>y((r=>Math.min(r+1,f)));return(0,l.jsxs)("div",{children:[(0,l.jsx)("div",{children:(0,l.jsx)(b,{onSearchChange:r=>{h(r),y(1)}})}),(0,l.jsx)(w,{currentPage:p,totalPages:f,onPrevious:P,onNext:E}),A,(0,l.jsx)(d,{type:t,onAdd:async(r,e)=>{try{switch(console.log("newData :",r),e){case"artist":await s.E.createArtist(r);const e=await s.E.getLastArtist(),t=await(0,c.H2)(e);await(0,n.xY)(t);break;case"song":await s.E.uploadAudio(r);const o=await s.E.getLastAudio(),a=await(0,c.qx)(o.audios[0],o,o.name);await(0,n.ei)(a);break;case"album":await s.E.createAlbum(r);const i=await s.E.getLastAlbum(),l=await(0,c.TI)(i);await(0,n.kI)(l);break;case"admin":await s.E.addAdmin(r)}a.B.notify("Ajout r\xe9ussie","success"),m()}catch(t){a.B.notify("Erreur","warning"),console.error("Erreur lors de l'ajout de l'\xe9l\xe9ment :",t)}}}),(0,l.jsx)(w,{currentPage:p,totalPages:f,onPrevious:P,onNext:E})]})}},144:(r,e,t)=>{t.d(e,{EU:()=>i,Fk:()=>m,OX:()=>a,Yj:()=>h,aS:()=>s,ei:()=>n,ep:()=>b,fC:()=>u,kI:()=>y,mV:()=>g,rU:()=>p,vB:()=>w,xD:()=>l,xY:()=>d,zP:()=>c});const o=()=>new Promise(((r,e)=>{const t=indexedDB.open("mk-bospot",1);t.onupgradeneeded=r=>{const e=r.target.result;e.createObjectStore("audios",{keyPath:"_id"}),e.createObjectStore("artists",{keyPath:"_id"}),e.createObjectStore("albums",{keyPath:"_id"})},t.onerror=r=>{e("Database error: ".concat(r.target.errorCode))},t.onsuccess=e=>{r(e.target.result)}})),a=async r=>{const e=(await o()).transaction("audios","readwrite").objectStore("audios");for(let t of r)e.put(t)},s=async()=>{const r=(await o()).transaction("audios","readonly").objectStore("audios");return new Promise(((e,t)=>{const o=r.getAll();o.onerror=()=>{t("Failed to retrieve data from database.")},o.onsuccess=()=>{e(o.result)}}))},n=async r=>{try{const e=(await o()).transaction("audios","readwrite"),t=e.objectStore("audios");return new Promise(((o,a)=>{const s=t.add(r);s.onsuccess=()=>o(s.result),s.onerror=()=>a(s.error),e.oncomplete=()=>console.log("Transaction completed."),e.onerror=()=>a(e.error)}))}catch(e){throw console.error("Error adding audio:",e),e}},c=async r=>{(await o()).transaction("audios","readwrite").objectStore("audios").delete(r)},i=async r=>{try{const e=(await o()).transaction("audios","readwrite"),t=e.objectStore("audios");return new Promise(((o,a)=>{const s=t.put(r);s.onsuccess=()=>{console.log("Audio updated successfully."),o(s.result)},s.onerror=()=>{console.error("Error updating Audio:",s.error),a(s.error)},e.oncomplete=()=>console.log("Transaction for updating Audio completed."),e.onerror=()=>{console.error("Transaction error:",e.error),a(e.error)}}))}catch(e){throw console.error("Error updating Audio:",e),e}},l=async r=>{const e=(await o()).transaction("artists","readwrite").objectStore("artists");for(let t of r)e.put(t)},u=async()=>{const r=(await o()).transaction("artists","readonly").objectStore("artists");return new Promise(((e,t)=>{const o=r.getAll();o.onerror=()=>{t("Failed to retrieve data from database.")},o.onsuccess=()=>{e(o.result)}}))},d=async r=>{(await o()).transaction("artists","readwrite").objectStore("artists").add(r)},w=async r=>{(await o()).transaction("artists","readwrite").objectStore("artists").delete(r)},b=async r=>{try{const e=(await o()).transaction("artists","readwrite"),t=e.objectStore("artists");return new Promise(((o,a)=>{const s=t.put(r);s.onsuccess=()=>{console.log("Artist updated successfully."),o(s.result)},s.onerror=()=>{console.error("Error updating Artist:",s.error),a(s.error)},e.oncomplete=()=>console.log("Transaction for updating Artist completed."),e.onerror=()=>{console.error("Transaction error:",e.error),a(e.error)}}))}catch(e){throw console.error("Error updating Artist:",e),e}},m=async r=>{const e=(await o()).transaction("albums","readwrite").objectStore("albums");for(let t of r)e.put(t)},p=async()=>{const r=(await o()).transaction("albums","readonly").objectStore("albums");return new Promise(((e,t)=>{const o=r.getAll();o.onerror=()=>{t("Failed to retrieve data from database.")},o.onsuccess=()=>{e(o.result)}}))},y=async r=>{try{const e=(await o()).transaction("albums","readwrite"),t=e.objectStore("albums");return new Promise(((o,a)=>{const s=t.add(r);s.onsuccess=()=>o(s.result),s.onerror=()=>a(s.error),e.oncomplete=()=>console.log("Transaction for adding album completed."),e.onerror=()=>a(e.error)}))}catch(e){throw console.error("Error adding album:",e),e}},g=async r=>{(await o()).transaction("albums","readwrite").objectStore("albums").delete(r)},h=async r=>{try{const e=(await o()).transaction("albums","readwrite"),t=e.objectStore("albums");return new Promise(((o,a)=>{const s=t.put(r);s.onsuccess=()=>{console.log("Album updated successfully."),o(s.result)},s.onerror=()=>{console.error("Error updating album:",s.error),a(s.error)},e.oncomplete=()=>console.log("Transaction for updating album completed."),e.onerror=()=>{console.error("Transaction error:",e.error),a(e.error)}}))}catch(e){throw console.error("Error updating album:",e),e}}}}]);
//# sourceMappingURL=927.7a983a18.chunk.js.map