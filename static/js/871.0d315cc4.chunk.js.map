{"version":3,"file":"static/js/871.0d315cc4.chunk.js","mappings":"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","sources":["components/Loader/index.js","services/apiService.js","services/indexerDBService.js","views/ArtistDashboardView.js"],"sourcesContent":["import React from 'react';\nimport './index.css';\n\nconst Loader = () => (\n  <div className=\"loader-container\">\n    <div className=\"loader\"></div>\n    <p className=\"loader-text\">\n      Le premier chargement des données peut prendre de 10 à 30 secondes. Si\n      cela prend trop de temps, n'hésitez pas à contacter notre support.\n    </p>\n  </div>\n);\n\nexport default Loader;\n","const API_URL = process.env.REACT_APP_API_URL;\n\n/* ------------- AUDIO ------------- */\nconst getAudios = async () => {\n  const response = await fetch(`${API_URL}audio`);\n  if (!response.ok)\n    throw new Error('Erreur lors de la récupération de l’audio');\n  return await response.json();\n};\n\nconst getSingleAudio = async (id) => {\n  const response = await fetch(`${API_URL}audio/${id}`);\n  if (!response.ok)\n    throw new Error('Erreur lors de la récupération de l’audio');\n  return await response.json();\n};\n\nconst getLastAudio = async (id) => {\n  const response = await fetch(`${API_URL}audio/last`);\n  if (!response.ok)\n    throw new Error('Erreur lors de la récupération de l’audio');\n  return await response.json();\n};\n\nconst editAudio = async (id, audioData) => {\n  const token = localStorage.getItem('userToken');\n  const response = await fetch(`${API_URL}audio/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(audioData),\n  });\n  if (!response.ok)\n    throw new Error('Erreur lors de la modification de l’audio');\n  return await response.json();\n};\n\nconst uploadAudio = async (audioFile) => {\n  const token = localStorage.getItem('userToken');\n  const formData = new FormData();\n  formData.append('audioFile', audioFile);\n\n  const response = await fetch(`${API_URL}audio/upload`, {\n    method: 'POST',\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n    body: formData,\n  });\n  if (!response.ok) throw new Error('Erreur lors de l’upload de l’audio');\n  return await response.json();\n};\n\nconst deleteAudio = async (id) => {\n  const token = localStorage.getItem('userToken');\n  const response = await fetch(`${API_URL}audio/${id}`, {\n    method: 'DELETE',\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  if (!response.ok) throw new Error('Erreur lors de la suppression de l’audio');\n  return await response.json();\n};\n\nconst streamAudio = async (id) => {\n  const response = await fetch(`${API_URL}audio/stream/${id}`);\n  if (!response.ok) throw new Error('Erreur lors du streaming de l’audio');\n  return await response.json();\n};\n\nconst getStreamingCount = async (id) => {\n  const response = await fetch(`${API_URL}audio/streamed/${id}`);\n  if (!response.ok)\n    throw new Error('Erreur lors de la récupération du nombre de stream');\n  return await response.json();\n};\n\n/* ------------- ARTIST ------------- */\nconst getArtists = async () => {\n  const response = await fetch(`${API_URL}artist`);\n  if (!response.ok) throw new Error('Erreur lors du chargement des artistes');\n  return await response.json();\n};\n\nexport const getLastArtist = async () => {\n  const response = await fetch(`${API_URL}artist/last`);\n  const data = await response.json();\n  return data;\n};\n\nconst getSingleArtist = async (id) => {\n  const response = await fetch(`${API_URL}artist/${id}`);\n  if (!response.ok)\n    throw new Error('Erreur lors de la récupération de l’artiste');\n  return await response.json();\n};\n\nconst editArtist = async (artistData) => {\n  const token = localStorage.getItem('userToken');\n  const id = artistData.id;\n  const response = await fetch(`${API_URL}artist/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(artistData),\n  });\n  if (!response.ok)\n    throw new Error('Erreur lors de la modification de l’artiste');\n  return await response.json();\n};\n\nconst createArtist = async (artistData) => {\n  const token = localStorage.getItem('userToken');\n  const response = await fetch(`${API_URL}artist`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(artistData),\n  });\n  if (!response.ok) throw new Error('Erreur lors de la création de l’artiste');\n  return await response.json();\n};\n\nconst deleteArtist = async (id) => {\n  const token = localStorage.getItem('userToken');\n  const response = await fetch(`${API_URL}artist/${id}`, {\n    method: 'DELETE',\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  if (!response.ok)\n    throw new Error('Erreur lors de la suppression de l’artiste');\n  return await response.json();\n};\n\n/* ------------- ALBUM ------------- */\nconst getAlbums = async () => {\n  const response = await fetch(`${API_URL}album`);\n  if (!response.ok) throw new Error('Erreur lors du chargement des albums');\n  return await response.json();\n};\n\nconst getLastAlbum = async (id) => {\n  const response = await fetch(`${API_URL}album/last`);\n  if (!response.ok)\n    throw new Error(`Erreur lors de la récupération de l'album`);\n  return await response.json();\n};\n\nconst getAllAlbums = async () => {\n  const response = await fetch(`${API_URL}album/all`);\n  if (!response.ok) throw new Error('Erreur lors du chargement des albums');\n  return await response.json();\n};\n\nconst getSingleAlbum = async (id) => {\n  const response = await fetch(`${API_URL}album/${id}`);\n  if (!response.ok)\n    throw new Error('Erreur lors de la récupération de l’album');\n  return await response.json();\n};\n\nconst createAlbum = async (albumData) => {\n  console.log(albumData);\n  const response = await fetch(`${API_URL}album`, {\n    method: 'POST',\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n    body: albumData,\n  });\n\n  if (!response.ok) throw new Error('Erreur lors de la création de l’album');\n  return await response.json();\n};\n\nconst editAlbum = async (id, albumData) => {\n  const formData = new FormData();\n  formData.append('title', albumData.title);\n  formData.append('artist', albumData.artistId);\n  formData.append('releaseDate', albumData.releaseDate);\n  formData.append('genre', albumData.genre);\n\n  if (albumData.picture && albumData.picture instanceof File) {\n    formData.append('albumImage', albumData.picture);\n  }\n\n  const response = await fetch(`${API_URL}album/${id}`, {\n    method: 'PUT',\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n    body: formData,\n  });\n\n  if (!response.ok)\n    throw new Error('Erreur lors de la modification de l’album');\n  return await response.json();\n};\n\nconst deleteAlbum = async (id) => {\n  const token = localStorage.getItem('userToken');\n  const response = await fetch(`${API_URL}album/${id}`, {\n    method: 'DELETE',\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  if (!response.ok) throw new Error('Erreur lors de la suppression de l’album');\n  return await response.json();\n};\n\n/* ------------- ADMIN ------------- */\nconst getAdmins = async () => {\n  const token = localStorage.getItem('userToken');\n  const response = await fetch(`${API_URL}admin`, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  if (!response.ok)\n    throw new Error(\n      'Erreur lors de la récupération des données des administrateurs'\n    );\n  return await response.json();\n};\n\nconst getLastAdmin = async (id) => {\n  const response = await fetch(`${API_URL}admin/last`, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  if (!response.ok)\n    throw new Error('Erreur lors de la récupération de l’admin');\n  return await response.json();\n};\n\nconst getSingleAdmin = async (id) => {\n  const token = localStorage.getItem('userToken');\n  const response = await fetch(`${API_URL}admin/${id}`, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  if (!response.ok)\n    throw new Error(\n      'Erreur lors de la récupération des données de l’administrateur'\n    );\n  return await response.json();\n};\n\nconst addAdmin = async (adminData) => {\n  const token = localStorage.getItem('userToken');\n  const response = await fetch(`${API_URL}admin`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(adminData),\n  });\n  if (!response.ok)\n    throw new Error('Erreur lors de l’ajout de l’administrateur');\n  return await response.json();\n};\n\nconst editAdmin = async (id, adminData) => {\n  const token = localStorage.getItem('userToken');\n  const response = await fetch(`${API_URL}admin/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(adminData),\n  });\n  if (!response.ok)\n    throw new Error('Erreur lors de la mise à jour de l’administrateur');\n  return await response.json();\n};\n\nconst deleteAdmin = async (id) => {\n  const token = localStorage.getItem('userToken');\n  const response = await fetch(`${API_URL}admin/${id}`, {\n    method: 'DELETE',\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  if (!response.ok)\n    throw new Error('Erreur lors de la suppression de l’administrateur');\n  return await response.json();\n};\n\nexport const apiService = {\n  /* ------------- AUDIO ------------- */\n  getAudios,\n  getSingleAudio,\n  getLastAudio,\n  editAudio,\n  uploadAudio,\n  deleteAudio,\n  streamAudio,\n  getStreamingCount,\n  /* ------------- ARTIST ------------- */\n  getArtists,\n  getLastArtist,\n  getSingleArtist,\n  editArtist,\n  createArtist,\n  deleteArtist,\n  /* ------------- ALBUM ------------- */\n  getAlbums,\n  getLastAlbum,\n  getAllAlbums,\n  getSingleAlbum,\n  editAlbum,\n  createAlbum,\n  deleteAlbum,\n  /* ------------- ADMIN ------------- */\n  getAdmins,\n  getLastAdmin,\n  getSingleAdmin,\n  addAdmin,\n  editAdmin,\n  deleteAdmin,\n};\n","const openDatabase = () => {\n  return new Promise((resolve, reject) => {\n    const request = indexedDB.open('mk-bospot', 1);\n\n    request.onupgradeneeded = (event) => {\n      const db = event.target.result;\n      db.createObjectStore('audios', { keyPath: '_id' });\n      db.createObjectStore('artists', { keyPath: '_id' });\n      db.createObjectStore('albums', { keyPath: '_id' });\n    };\n\n    request.onerror = (event) => {\n      reject(`Database error: ${event.target.errorCode}`);\n    };\n\n    request.onsuccess = (event) => {\n      resolve(event.target.result);\n    };\n  });\n};\n\nexport const saveAudios = async (audios) => {\n  const db = await openDatabase();\n  const transaction = db.transaction('audios', 'readwrite');\n  const store = transaction.objectStore('audios');\n\n  for (let audio of audios) {\n    store.put(audio);\n  }\n};\n\nexport const getAudios = async () => {\n  const db = await openDatabase();\n  const transaction = db.transaction('audios', 'readonly');\n  const store = transaction.objectStore('audios');\n\n  return new Promise((resolve, reject) => {\n    const request = store.getAll();\n\n    request.onerror = () => {\n      reject('Failed to retrieve data from database.');\n    };\n\n    request.onsuccess = () => {\n      resolve(request.result);\n    };\n  });\n};\n\nexport const addAudio = async (artist) => {\n  const db = await openDatabase();\n  const transaction = db.transaction('audios', 'readwrite');\n  const store = transaction.objectStore('audios');\n  store.add(artist);\n};\n\nexport const saveArtists = async (artists) => {\n  const db = await openDatabase();\n  const transaction = db.transaction('artists', 'readwrite');\n  const store = transaction.objectStore('artists');\n\n  for (let artist of artists) {\n    store.put(artist);\n  }\n};\n\nexport const getArtists = async () => {\n  const db = await openDatabase();\n  const transaction = db.transaction('artists', 'readonly');\n  const store = transaction.objectStore('artists');\n\n  return new Promise((resolve, reject) => {\n    const request = store.getAll();\n\n    request.onerror = () => {\n      reject('Failed to retrieve data from database.');\n    };\n\n    request.onsuccess = () => {\n      resolve(request.result);\n    };\n  });\n};\n\nexport const addArtist = async (artist) => {\n  const db = await openDatabase();\n  const transaction = db.transaction('artists', 'readwrite');\n  const store = transaction.objectStore('artists');\n  store.add(artist);\n};\n\nexport const saveAlbums = async (albums) => {\n  const db = await openDatabase();\n  const transaction = db.transaction('albums', 'readwrite');\n  const store = transaction.objectStore('albums');\n\n  for (let album of albums) {\n    store.put(album);\n  }\n};\n\nexport const getAlbums = async () => {\n  const db = await openDatabase();\n  const transaction = db.transaction('albums', 'readonly');\n  const store = transaction.objectStore('albums');\n\n  return new Promise((resolve, reject) => {\n    const request = store.getAll();\n\n    request.onerror = () => {\n      reject('Failed to retrieve data from database.');\n    };\n\n    request.onsuccess = () => {\n      resolve(request.result);\n    };\n  });\n};\n\nexport const addAlbum = async (artist) => {\n  const db = await openDatabase();\n  const transaction = db.transaction('albums', 'readwrite');\n  const store = transaction.objectStore('albums');\n  store.add(artist);\n};\n","import React, { useState, useEffect, lazy } from 'react';\nimport { apiService } from '../services/apiService';\nimport { saveArtists, getArtists } from '../services/indexerDBService';\nimport './index.css';\n\nimport Loader from '../components/Loader';\nconst CardList = lazy(() => import('../components/CardList'));\n\nconst transformArtist = async (artist) => ({\n  _id: artist._id,\n  title: artist.name,\n});\n\nconst ArtistDashboardView = () => {\n  const [artists, setArtists] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchArtists = async () => {\n      setIsLoading(true);\n\n      try {\n        let artistData = await getArtists();\n\n        if (!artistData.length) {\n          const fetchedArtists = await apiService.getArtists();\n          const transformedArtists = await Promise.all(\n            fetchedArtists.map(transformArtist)\n          );\n          await saveArtists(transformedArtists);\n          artistData = transformedArtists;\n          console.log('Fetched : ', transformedArtists);\n        }\n\n        setArtists(artistData);\n      } catch (error) {\n        console.error(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchArtists();\n  }, []);\n\n  return (\n    <div className=\"dashboard-list-view \">\n      <h2>Artist Dashboard</h2>\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <>\n          <CardList items={artists} type=\"artist\" />\n        </>\n      )}{' '}\n    </div>\n  );\n};\n\nexport default ArtistDashboardView;\n"],"names":["Loader","_jsxs","className","children","_jsx","API_URL","process","apiService","getAudios","async","response","fetch","concat","ok","Error","json","getSingleAudio","id","getLastAudio","editAudio","audioData","token","localStorage","getItem","method","headers","Authorization","body","JSON","stringify","uploadAudio","formData","FormData","append","audioFile","deleteAudio","streamAudio","getStreamingCount","getArtists","getLastArtist","getSingleArtist","editArtist","artistData","createArtist","deleteArtist","getAlbums","getLastAlbum","getAllAlbums","getSingleAlbum","editAlbum","albumData","title","artistId","releaseDate","genre","picture","File","createAlbum","console","log","deleteAlbum","getAdmins","getLastAdmin","getSingleAdmin","addAdmin","adminData","editAdmin","deleteAdmin","openDatabase","Promise","resolve","reject","request","indexedDB","open","onupgradeneeded","event","db","target","result","createObjectStore","keyPath","onerror","errorCode","onsuccess","saveAudios","store","transaction","objectStore","audio","audios","put","getAll","saveArtists","artist","artists","addArtist","add","saveAlbums","album","albums","CardList","lazy","transformArtist","_id","name","ArtistDashboardView","setArtists","useState","isLoading","setIsLoading","useEffect","length","fetchedArtists","transformedArtists","all","map","error","fetchArtists","_Fragment","items","type"],"sourceRoot":""}