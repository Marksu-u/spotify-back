{"version":3,"file":"static/js/623.b41c857b.chunk.js","mappings":"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","sources":["components/Loader/index.js","services/apiService.js","views/AudioDashboardView.js"],"sourcesContent":["import React from 'react';\nimport './index.css';\n\nconst Loader = () => (\n  <div className=\"loader-container\">\n    <div className=\"loader\"></div>\n  </div>\n);\n\nexport default Loader;\n","const API_URL = process.env.REACT_APP_API_URL;\n\n/* ------------- AUDIO ------------- */\nconst getAudios = async () => {\n  const response = await fetch(`${API_URL}audio`);\n  if (!response.ok) throw new Error('Erreur lors du chargement des audios');\n  return await response.json();\n};\n\nconst getSingleAudio = async (id) => {\n  const response = await fetch(`${API_URL}audio/${id}`);\n  if (!response.ok)\n    throw new Error('Erreur lors de la récupération de l’audio');\n  return await response.json();\n};\n\nconst editAudio = async (id, audioData) => {\n  const response = await fetch(`${API_URL}audio/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(audioData),\n  });\n  if (!response.ok)\n    throw new Error('Erreur lors de la modification de l’audio');\n  return await response.json();\n};\n\nconst uploadAudio = async (audioFile) => {\n  const formData = new FormData();\n  formData.append('audioFile', audioFile);\n\n  const response = await fetch(`${API_URL}audio/upload`, {\n    method: 'POST',\n    body: formData,\n  });\n  if (!response.ok) throw new Error('Erreur lors de l’upload de l’audio');\n  return await response.json();\n};\n\nconst deleteAudio = async (id) => {\n  const response = await fetch(`${API_URL}audio/${id}`, {\n    method: 'DELETE',\n  });\n  if (!response.ok) throw new Error('Erreur lors de la suppression de l’audio');\n  return await response.json();\n};\n\nconst streamAudio = async (id) => {\n  const response = await fetch(`${API_URL}audio/stream/${id}`);\n  if (!response.ok) throw new Error('Erreur lors du streaming de l’audio');\n  return await response.json();\n};\n\nconst getStreamingCount = async (id) => {\n  const response = await fetch(`${API_URL}audio/streamed/${id}`);\n  if (!response.ok)\n    throw new Error('Erreur lors de la récupération du nombre de stream');\n  return await response.json();\n};\n\n/* ------------- ARTIST ------------- */\nconst getArtists = async () => {\n  const response = await fetch(`${API_URL}artist/`);\n  if (!response.ok) throw new Error('Erreur lors du chargement des artistes');\n  return await response.json();\n};\n\nconst getSingleArtist = async (id) => {\n  const response = await fetch(`${API_URL}artist/${id}`);\n  if (!response.ok)\n    throw new Error('Erreur lors de la récupération de l’artiste');\n  return await response.json();\n};\n\nconst editArtist = async (id, artistData) => {\n  const response = await fetch(`${API_URL}artist/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(artistData),\n  });\n  if (!response.ok)\n    throw new Error('Erreur lors de la modification de l’artiste');\n  return await response.json();\n};\n\nconst createArtist = async (artistData) => {\n  const response = await fetch(`${API_URL}artist`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(artistData),\n  });\n  if (!response.ok) throw new Error('Erreur lors de la création de l’artiste');\n  return await response.json();\n};\n\nconst deleteArtist = async (id) => {\n  const response = await fetch(`${API_URL}artist/${id}`, {\n    method: 'DELETE',\n  });\n  if (!response.ok)\n    throw new Error('Erreur lors de la suppression de l’artiste');\n  return await response.json();\n};\n\n/* ------------- ALBUM ------------- */\nconst getAlbums = async () => {\n  const response = await fetch(`${API_URL}album`);\n  if (!response.ok) throw new Error('Erreur lors du chargement des albums');\n  return await response.json();\n};\n\nconst getSingleAlbum = async (id) => {\n  const response = await fetch(`${API_URL}album/${id}`);\n  if (!response.ok)\n    throw new Error('Erreur lors de la récupération de l’album');\n  return await response.json();\n};\n\nconst createAlbum = async (albumData) => {\n  const response = await fetch(`${API_URL}album`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(albumData),\n  });\n  if (!response.ok) throw new Error('Erreur lors de la création de l’album');\n  return await response.json();\n};\n\nconst editAlbum = async (id, albumData) => {\n  console.log(albumData);\n  const response = await fetch(`${API_URL}album/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(albumData),\n  });\n  if (!response.ok)\n    throw new Error('Erreur lors de la modification de l’album');\n  return await response.json();\n};\n\nconst deleteAlbum = async (id) => {\n  const response = await fetch(`${API_URL}album/${id}`, {\n    method: 'DELETE',\n  });\n  if (!response.ok) throw new Error('Erreur lors de la suppression de l’album');\n  return await response.json();\n};\n\n/* ------------- ADMIN ------------- */\nconst getAdmins = async () => {\n  const token = localStorage.getItem('userToken');\n  const response = await fetch(`${API_URL}admin/`, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  if (!response.ok)\n    throw new Error(\n      'Erreur lors de la récupération des données des administrateurs'\n    );\n  return await response.json();\n};\n\nconst getSingleAdmin = async (id) => {\n  const token = localStorage.getItem('userToken');\n  const response = await fetch(`${API_URL}admin/${id}`, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  if (!response.ok)\n    throw new Error(\n      'Erreur lors de la récupération des données de l’administrateur'\n    );\n  return await response.json();\n};\n\nconst addAdmin = async (adminData) => {\n  const token = localStorage.getItem('userToken');\n  const response = await fetch(`${API_URL}admin`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(adminData),\n  });\n  if (!response.ok)\n    throw new Error('Erreur lors de l’ajout de l’administrateur');\n  return await response.json();\n};\n\nconst editAdmin = async (id, adminData) => {\n  const token = localStorage.getItem('userToken');\n  const response = await fetch(`${API_URL}admin/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(adminData),\n  });\n  if (!response.ok)\n    throw new Error('Erreur lors de la mise à jour de l’administrateur');\n  return await response.json();\n};\n\nconst deleteAdmin = async (id) => {\n  const token = localStorage.getItem('userToken');\n  const response = await fetch(`${API_URL}admin/${id}`, {\n    method: 'DELETE',\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  if (!response.ok)\n    throw new Error('Erreur lors de la suppression de l’administrateur');\n  return await response.json();\n};\n\nexport const apiService = {\n  /* ------------- AUDIO ------------- */\n  getAudios,\n  getSingleAudio,\n  editAudio,\n  uploadAudio,\n  deleteAudio,\n  streamAudio,\n  getStreamingCount,\n  /* ------------- ARTIST ------------- */\n  getArtists,\n  getSingleArtist,\n  editArtist,\n  createArtist,\n  deleteArtist,\n  /* ------------- ALBUM ------------- */\n  getAlbums,\n  getSingleAlbum,\n  editAlbum,\n  createAlbum,\n  deleteAlbum,\n  /* ------------- ADMIN ------------- */\n  getAdmins,\n  getSingleAdmin,\n  addAdmin,\n  editAdmin,\n  deleteAdmin,\n};\n","import React, { lazy, useEffect, useState, Suspense } from 'react';\nimport { apiService } from '../services/apiService';\nimport { notificationService } from '../services/notificationService';\nimport './index.css';\n\nimport Loader from '../components/Loader';\nconst CardList = lazy(() => import('../components/CardList'));\nconst Button = lazy(() => import('../components/Button'));\n\nconst AudioDashboardView = () => {\n  const [audios, setAudios] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [hasMore, setHasMore] = useState(true);\n\n  const ITEMS_PER_PAGE = 10;\n\n  useEffect(() => {\n    fetchAudios(currentPage);\n  }, [currentPage]);\n\n  const fetchAudios = async (page) => {\n    try {\n      setIsLoading(true);\n      const fetchedAudios = await apiService.getAudios(page, ITEMS_PER_PAGE);\n      if (fetchedAudios.length > 0) {\n        setAudios((prevAudios) => [\n          ...prevAudios,\n          ...fetchedAudios.map(transformAudio),\n        ]);\n        notificationService.notify('Audios chargés avec succès !', 'success');\n        if (fetchedAudios.length < ITEMS_PER_PAGE) {\n          setHasMore(false);\n        }\n      } else {\n        setHasMore(false);\n      }\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const transformAudio = (audio) => {\n    return {\n      id: audio._id,\n      title: audio.filename,\n      artist: audio.metadata.artist.name,\n      artistId: audio.metadata.artist._id,\n      album: audio.metadata.album.title,\n      albumId: audio.metadata.album._id,\n      date: audio.metadata.date,\n      genre: audio.metadata.genre.join(', '),\n      image: convertBufferToImageUrl(audio.metadata.picture[0]),\n    };\n  };\n\n  const convertBufferToImageUrl = (picture) => {\n    if (picture && picture.data && picture.data.data) {\n      const buffer = new Uint8Array(picture.data.data);\n      const blob = new Blob([buffer], { type: picture.format });\n      return URL.createObjectURL(blob);\n    }\n    return null;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"dashboard-list-view\">\n        <h2>Audio Dashboard</h2>\n        <Loader />\n      </div>\n    );\n  }\n\n  const loadMoreAudios = () => {\n    if (hasMore && !isLoading) {\n      setCurrentPage((prevPage) => prevPage + 1);\n    }\n  };\n\n  return (\n    <div className=\"dashboard-list-view\">\n      <h2>Audio Dashboard</h2>\n      {isLoading && <Loader />}\n      {hasMore && !isLoading && (\n        <Button label=\"Charger plus\" onClick={loadMoreAudios} />\n      )}\n      <CardList items={audios} type=\"song\" />\n    </div>\n  );\n};\n\nexport default AudioDashboardView;\n"],"names":["Loader","_jsx","className","children","API_URL","process","REACT_APP_API_URL","apiService","getAudios","async","response","fetch","concat","ok","Error","json","getSingleAudio","id","editAudio","audioData","method","headers","body","JSON","stringify","uploadAudio","formData","FormData","append","audioFile","deleteAudio","streamAudio","getStreamingCount","getArtists","getSingleArtist","editArtist","artistData","createArtist","deleteArtist","getAlbums","getSingleAlbum","editAlbum","albumData","console","log","createAlbum","deleteAlbum","getAdmins","token","localStorage","getItem","Authorization","getSingleAdmin","addAdmin","adminData","editAdmin","deleteAdmin","CardList","lazy","Button","AudioDashboardView","audios","setAudios","useState","isLoading","setIsLoading","currentPage","setCurrentPage","hasMore","setHasMore","useEffect","fetchAudios","fetchedAudios","page","length","prevAudios","map","transformAudio","notificationService","notify","error","audio","_id","title","filename","artist","metadata","name","artistId","album","albumId","date","genre","join","image","convertBufferToImageUrl","picture","data","buffer","Uint8Array","blob","Blob","type","format","URL","createObjectURL","_jsxs","label","onClick","loadMoreAudios","prevPage","items"],"sourceRoot":""}