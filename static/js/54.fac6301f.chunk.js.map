{"version":3,"file":"static/js/54.fac6301f.chunk.js","mappings":"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","sources":["components/Modal/index.js"],"sourcesContent":["import React, { Suspense, useState, useEffect, lazy, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { apiService } from '../../services/apiService';\nimport './index.css';\n\nimport Loader from '../Loader';\nconst Input = lazy(() => import('../Input'));\nconst Button = lazy(() => import('../Button'));\nconst Select = lazy(() => import('../Select'));\n\nconst Modal = ({ isOpen, onClose, data, onSubmit, type, actionType }) => {\n  const [formData, setFormData] = useState(actionType === 'add' ? {} : data);\n  const [artists, setArtists] = useState([]);\n  const [albums, setAlbums] = useState([]);\n\n  useEffect(() => {\n    if (actionType !== 'delete') {\n      const fetchAlbums = async () => {\n        try {\n          const fetchedAlbums = await apiService.getAlbums();\n          const transformedAlbums = fetchedAlbums.map((album) => {\n            return {\n              id: album._id,\n              title: album.title,\n            };\n          });\n          setAlbums(transformedAlbums);\n        } catch (error) {\n          console.error(error);\n        }\n      };\n      const fetchArtists = async () => {\n        try {\n          const fetchedArtists = await apiService.getArtists();\n          const transformedArtists = fetchedArtists.map((artist) => {\n            return {\n              id: artist._id,\n              title: artist.name,\n            };\n          });\n          setArtists(transformedArtists);\n        } catch (error) {\n          console.error(error);\n        }\n      };\n      fetchArtists();\n      fetchAlbums();\n      setFormData(data);\n    }\n  }, [data, actionType]);\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n\n    setFormData({\n      ...formData,\n      [name]: value,\n    });\n  };\n\n  const handleChangeFile = (e) => {\n    const { name, files } = e.target;\n    if (files && files[0]) {\n      setFormData((prevData) => ({\n        ...prevData,\n        [name]: files[0],\n      }));\n    } else {\n      setFormData((prevData) => ({\n        ...prevData,\n        [name]: null,\n      }));\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    onSubmit(formData);\n  };\n\n  const renderContent = () => {\n    if (actionType === 'delete') {\n      return (\n        <>\n          <p>Êtes-vous sûr de vouloir supprimer cet élément ?</p>\n        </>\n      );\n    } else {\n      console.log(formData);\n      switch (type) {\n        case 'artist':\n          return (\n            <>\n              <Input\n                label=\"Artist Name\"\n                name=\"title\"\n                value={formData.title || ''}\n                onChange={handleChange}\n              />\n            </>\n          );\n        case 'album':\n          return (\n            <>\n              <Input\n                label=\"Titre\"\n                name=\"title\"\n                value={formData.title || ''}\n                onChange={handleChange}\n                required\n              />\n              <Select\n                label=\"Artiste\"\n                name=\"artistId\"\n                options={[{ id: '', title: 'Sélectionner...' }, ...artists]}\n                value={formData.artistId || ''}\n                onChange={handleChange}\n                required\n              />\n              <Input\n                type=\"file\"\n                label=\"Couverture\"\n                name=\"picture\"\n                onChange={handleChangeFile}\n              />\n              <Input\n                type=\"number\"\n                label=\"Année de sortie\"\n                name=\"releaseYear\"\n                value={\n                  formData.releaseDate\n                    ? new Date(formData.releaseDate).getFullYear()\n                    : ''\n                }\n                onChange={(e) => {\n                  setFormData({\n                    ...formData,\n                    releaseDate: new Date(e.target.value, 0, 1),\n                  });\n                }}\n                min=\"1900\"\n                max={new Date().getFullYear()}\n              />\n              <Input\n                label=\"Genre\"\n                name=\"genre\"\n                value={formData.genre || ''}\n                onChange={handleChange}\n              />\n            </>\n          );\n        case 'song':\n          return (\n            <>\n              <Input\n                label=\"Song Title\"\n                name=\"title\"\n                value={formData.title || ''}\n                onChange={handleChange}\n              />\n              <Select\n                label=\"Artist\"\n                name=\"artistId\"\n                options={[{ id: '', title: 'Sélectionner...' }, ...artists]}\n                value={formData.artistId || ''}\n                onChange={handleChange}\n              />\n              <Select\n                label=\"Album\"\n                name=\"albumId\"\n                options={[{ id: '', title: 'Sélectionner...' }, ...albums]}\n                value={formData.albumId || '65a1a0ff45505f5fa98ae996'}\n                onChange={handleChange}\n              />\n              {actionType === 'add' && (\n                <Input\n                  type=\"file\"\n                  label=\"Audio File\"\n                  name=\"audioFile\"\n                  onChange={handleChangeFile}\n                />\n              )}\n            </>\n          );\n        case 'admin':\n          return (\n            <>\n              <Input\n                type=\"email\"\n                label=\"Email\"\n                name=\"artist\"\n                value={formData.artist || ''}\n                onChange={handleChange}\n              />\n              <Input\n                type=\"text\"\n                label=\"Username\"\n                name=\"title\"\n                value={formData.title || ''}\n                onChange={handleChange}\n              />\n              <Input\n                type=\"text\"\n                label=\"Mot de passe\"\n                name=\"password\"\n                value={''}\n                onChange={handleChange}\n              />\n            </>\n          );\n        default:\n          return <p>Action impossible</p>;\n      }\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <Suspense fallback={<Loader />}>\n      <div className=\"modal-backdrop\">\n        <div className=\"modal-content\">\n          <form onSubmit={handleSubmit}>\n            {renderContent()}\n            <Button type=\"submit\" label=\"Valider\" />\n            <Button type=\"button\" label=\"Annuler\" onClick={onClose} />\n          </form>\n        </div>\n      </div>\n    </Suspense>\n  );\n};\n\nModal.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n  data: PropTypes.object,\n  onSubmit: PropTypes.func.isRequired,\n  type: PropTypes.oneOf(['artist', 'song', 'album']).isRequired,\n  actionType: PropTypes.oneOf(['update', 'delete', 'add']).isRequired,\n};\n\nexport default memo(Modal);\n"],"names":["Input","lazy","Button","Select","Modal","_ref","isOpen","onClose","data","onSubmit","type","actionType","formData","setFormData","useState","artists","setArtists","albums","setAlbums","useEffect","fetchAlbums","async","transformedAlbums","apiService","getAlbums","map","album","id","_id","title","error","console","transformedArtists","getArtists","artist","name","fetchArtists","handleChange","e","value","target","handleChangeFile","files","prevData","_jsx","Suspense","fallback","Loader","children","className","_jsxs","preventDefault","renderContent","_Fragment","log","label","onChange","required","options","artistId","releaseDate","Date","getFullYear","min","max","genre","albumId","onClick","memo"],"sourceRoot":""}