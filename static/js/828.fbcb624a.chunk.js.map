{"version":3,"file":"static/js/828.fbcb624a.chunk.js","mappings":"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","sources":["components/Card/index.js"],"sourcesContent":["import React, { useState, lazy } from 'react';\nimport PropTypes from 'prop-types';\nimport { apiService } from '../../services/apiService';\nimport { notificationService } from '../../services/notificationService';\nimport {\n  deleteAlbum,\n  updateAlbum,\n  deleteArtist,\n  updateArtist,\n  deleteAudio,\n  updateAudio,\n} from '../../services/indexerDBService';\nimport {\n  transformAlbums,\n  transformAudio,\n  transformArtist,\n} from '../../services/transformService';\nimport './index.css';\n\nconst Button = lazy(() => import('../Button'));\nconst Modal = lazy(() => import('../Modal'));\n\nconst Card = ({ type, data, onClick, onRefresh }) => {\n  const [isModalOpen, setModalOpen] = useState(false);\n  const [currentData, setCurrentData] = useState(null);\n  const [actionType, setActionType] = useState(null);\n\n  const performUpdate = async (editedData) => {\n    try {\n      switch (type) {\n        case 'song':\n          await apiService.editAudio(editedData);\n          const editAudio = await apiService.getSingleAudio(editedData._id);\n          const audioToEdit = await transformAudio(\n            editAudio.audios[0],\n            editAudio,\n            editAudio.name\n          );\n          await updateAudio(audioToEdit);\n          break;\n        case 'artist':\n          await apiService.editArtist(editedData);\n          const editArtist = await apiService.getSingleArtist(editedData._id);\n          const artistToEdit = await transformArtist(editArtist);\n          await updateArtist(artistToEdit);\n          break;\n        case 'album':\n          await apiService.editAlbum(editedData);\n          const editAlbum = await apiService.getSingleAlbum(editedData._id);\n          const albumToEdit = await transformAlbums(editAlbum);\n          await updateAlbum(albumToEdit);\n          break;\n        default:\n          console.error(`Unsupported type for update: ${type}`);\n      }\n      notificationService.notify('Mis à jour', 'success');\n      onRefresh();\n    } catch (error) {}\n  };\n\n  const performDelete = async (editedData) => {\n    try {\n      switch (type) {\n        case 'song':\n          await deleteAudio(editedData._id);\n          await apiService.deleteSong(editedData._id);\n          break;\n        case 'album':\n          await deleteAlbum(editedData._id);\n          await apiService.deleteAlbum(editedData._id);\n          break;\n        case 'artist':\n          await deleteArtist(editedData._id);\n          await apiService.deleteArtist(editedData._id);\n          break;\n        default:\n          console.error(`Unsupported type for delete: ${type}`);\n      }\n      notificationService.notify('Supprimé !', 'success');\n      onRefresh();\n    } catch (error) {\n      notificationService.notify('Erreur', 'warning');\n      console.error(\"Erreur lors de la suppression de l'élément :\", error);\n    }\n  };\n\n  const handleEdit = () => {\n    setModalOpen(true);\n    setCurrentData(data);\n    setActionType('update');\n  };\n\n  const handleDelete = () => {\n    setModalOpen(true);\n    setCurrentData(data);\n    setActionType('delete');\n  };\n\n  const handleSubmit = async (editedData) => {\n    setModalOpen(false);\n\n    try {\n      if (actionType === 'update') {\n        await performUpdate(editedData);\n      } else if (actionType === 'delete') {\n        await performDelete(editedData);\n      } else {\n        notificationService.notify('Unauthorized Action', 'warning');\n      }\n    } catch (err) {\n      console.error(`Error processing ${actionType}:`, err);\n      notificationService.notify(`Error processing ${actionType}`, 'error');\n    }\n  };\n\n  const renderContent = () => {\n    switch (type) {\n      /* ------ ARTISTE ------ */\n      case 'artist':\n        return (\n          <div className=\"card\">\n            <div className=\"card-content\">\n              <div className=\"card-details\">{data.title}</div>\n            </div>\n          </div>\n        );\n\n      /* ------ AUDIO ------ */\n      case 'song':\n        return (\n          <div className=\"card\">\n            <div className=\"card-image\">\n              <img src={data.picture} alt={data.album} />\n            </div>\n            <div className=\"card-content\">\n              <div className=\"card-title\">{data.title}</div>\n              <div className=\"card-details\">\n                <div>\n                  {data.artist} - {data.album}\n                </div>\n                <div>{data.releaseDate}</div>\n              </div>\n              <div className=\"card-genre\">\n                <div>{data.genre}</div>\n              </div>\n            </div>\n          </div>\n        );\n\n      /* ------ ALBUM ------ */\n      case 'album':\n        return (\n          <div className=\"card\">\n            <div className=\"card-image\">\n              <img src={data.picture} alt={data.title} />\n            </div>\n            <div className=\"card-content\">\n              <div className=\"card-title\">{data.title}</div>\n              <div className=\"card-details\">\n                <div>\n                  {data.artist} {data.date}\n                </div>\n              </div>\n              <div className=\"card-genre\">\n                <div>Genre : {data.genre}</div>\n              </div>\n            </div>\n          </div>\n        );\n\n      /* ------ ADMIN ------ */\n      case 'admin':\n        return (\n          <div className=\"card\">\n            <div className=\"card-content\">\n              <div className=\"card-title\">{data.title}</div>\n              <div className=\"card-details\">\n                <div>{data.artist}</div>\n              </div>\n            </div>\n          </div>\n        );\n\n      /* ------ DEFAULT ------ */\n      default:\n        return <div>Données non disponibles</div>;\n    }\n  };\n\n  const renderCRUDButtons = () => (\n    <div className=\"button-container\">\n      <Button label=\"Modifier\" onClick={handleEdit} />\n      <Button label=\"Supprimer\" onClick={handleDelete} />\n    </div>\n  );\n\n  return (\n    <div className=\"card\" onClick={onClick}>\n      {renderContent()}\n      {renderCRUDButtons()}\n      {isModalOpen && (\n        <Modal\n          isOpen={isModalOpen}\n          onClose={() => setModalOpen(false)}\n          data={currentData}\n          onSubmit={handleSubmit}\n          actionType={actionType}\n          type={type}\n        />\n      )}\n    </div>\n  );\n};\n\nCard.propTypes = {\n  type: PropTypes.oneOf(['artist', 'song', 'album', 'admin']),\n  title: PropTypes.string,\n  image: PropTypes.string,\n  data: PropTypes.any,\n  onClick: PropTypes.func,\n  onRefresh: PropTypes.func,\n};\n\nCard.defaultProps = {\n  onClick: () => {},\n  onRefresh: () => {},\n};\n\nexport default Card;\n"],"names":["Button","lazy","Modal","Card","_ref","type","data","onClick","onRefresh","isModalOpen","setModalOpen","useState","currentData","setCurrentData","actionType","setActionType","handleEdit","handleDelete","_jsxs","className","children","renderContent","_jsx","title","src","picture","alt","album","artist","releaseDate","genre","date","label","isOpen","onClose","onSubmit","async","apiService","editAudio","editedData","getSingleAudio","_id","audioToEdit","transformAudio","audios","name","updateAudio","editArtist","getSingleArtist","artistToEdit","transformArtist","updateArtist","editAlbum","getSingleAlbum","albumToEdit","transformAlbums","updateAlbum","console","error","concat","notificationService","notify","performUpdate","deleteAudio","deleteSong","deleteAlbum","deleteArtist","performDelete","err","defaultProps"],"sourceRoot":""}