{"version":3,"file":"static/js/871.8d65b260.chunk.js","mappings":"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","sources":["components/Loader/index.js","services/apiService.js","views/ArtistDashboardView.js"],"sourcesContent":["import React from 'react';\nimport './index.css';\n\nconst Loader = () => (\n  <div className=\"loader-container\">\n    <div className=\"loader\"></div>\n  </div>\n);\n\nexport default Loader;\n","const API_URL = process.env.REACT_APP_API_URL;\n\n/* ------------- AUDIO ------------- */\nconst getAudios = async () => {\n  const response = await fetch(`${API_URL}audio`);\n  if (!response.ok) throw new Error('Erreur lors du chargement des audios');\n  return await response.json();\n};\n\nconst getSingleAudio = async (id) => {\n  const response = await fetch(`${API_URL}audio/${id}`);\n  if (!response.ok)\n    throw new Error('Erreur lors de la récupération de l’audio');\n  return await response.json();\n};\n\nconst editAudio = async (id, audioData) => {\n  const response = await fetch(`${API_URL}audio/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(audioData),\n  });\n  if (!response.ok)\n    throw new Error('Erreur lors de la modification de l’audio');\n  return await response.json();\n};\n\nconst uploadAudio = async (audioFile) => {\n  const formData = new FormData();\n  formData.append('audioFile', audioFile);\n\n  const response = await fetch(`${API_URL}audio/upload`, {\n    method: 'POST',\n    body: formData,\n  });\n  if (!response.ok) throw new Error('Erreur lors de l’upload de l’audio');\n  return await response.json();\n};\n\nconst deleteAudio = async (id) => {\n  const response = await fetch(`${API_URL}audio/${id}`, {\n    method: 'DELETE',\n  });\n  if (!response.ok) throw new Error('Erreur lors de la suppression de l’audio');\n  return await response.json();\n};\n\nconst streamAudio = async (id) => {\n  const response = await fetch(`${API_URL}audio/stream/${id}`);\n  if (!response.ok) throw new Error('Erreur lors du streaming de l’audio');\n  return await response.json();\n};\n\nconst getStreamingCount = async (id) => {\n  const response = await fetch(`${API_URL}audio/streamed/${id}`);\n  if (!response.ok)\n    throw new Error('Erreur lors de la récupération du nombre de stream');\n  return await response.json();\n};\n\n/* ------------- ARTIST ------------- */\nconst getArtists = async () => {\n  const response = await fetch(`${API_URL}artist/`);\n  if (!response.ok) throw new Error('Erreur lors du chargement des artistes');\n  return await response.json();\n};\n\nconst getSingleArtist = async (id) => {\n  const response = await fetch(`${API_URL}artist/${id}`);\n  if (!response.ok)\n    throw new Error('Erreur lors de la récupération de l’artiste');\n  return await response.json();\n};\n\nconst editArtist = async (id, artistData) => {\n  const response = await fetch(`${API_URL}artist/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(artistData),\n  });\n  if (!response.ok)\n    throw new Error('Erreur lors de la modification de l’artiste');\n  return await response.json();\n};\n\nconst createArtist = async (artistData) => {\n  const response = await fetch(`${API_URL}artist`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(artistData),\n  });\n  if (!response.ok) throw new Error('Erreur lors de la création de l’artiste');\n  return await response.json();\n};\n\nconst deleteArtist = async (id) => {\n  const response = await fetch(`${API_URL}artist/${id}`, {\n    method: 'DELETE',\n  });\n  if (!response.ok)\n    throw new Error('Erreur lors de la suppression de l’artiste');\n  return await response.json();\n};\n\n/* ------------- ALBUM ------------- */\nconst getAlbums = async () => {\n  const response = await fetch(`${API_URL}album`);\n  if (!response.ok) throw new Error('Erreur lors du chargement des albums');\n  return await response.json();\n};\n\nconst getSingleAlbum = async (id) => {\n  const response = await fetch(`${API_URL}album/${id}`);\n  if (!response.ok)\n    throw new Error('Erreur lors de la récupération de l’album');\n  return await response.json();\n};\n\nconst createAlbum = async (albumData) => {\n  const response = await fetch(`${API_URL}album`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(albumData),\n  });\n  if (!response.ok) throw new Error('Erreur lors de la création de l’album');\n  return await response.json();\n};\n\nconst editAlbum = async (id, albumData) => {\n  const response = await fetch(`${API_URL}album/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(albumData),\n  });\n  if (!response.ok)\n    throw new Error('Erreur lors de la modification de l’album');\n  return await response.json();\n};\n\nconst deleteAlbum = async (id) => {\n  const response = await fetch(`${API_URL}album/${id}`, {\n    method: 'DELETE',\n  });\n  if (!response.ok) throw new Error('Erreur lors de la suppression de l’album');\n  return await response.json();\n};\n\n/* ------------- ADMIN ------------- */\nconst getAdmins = async () => {\n  const token = localStorage.getItem('userToken');\n  const response = await fetch(`${API_URL}admin/`, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  if (!response.ok)\n    throw new Error(\n      'Erreur lors de la récupération des données des administrateurs'\n    );\n  return await response.json();\n};\n\nconst getSingleAdmin = async (id) => {\n  const token = localStorage.getItem('userToken');\n  const response = await fetch(`${API_URL}admin/${id}`, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  if (!response.ok)\n    throw new Error(\n      'Erreur lors de la récupération des données de l’administrateur'\n    );\n  return await response.json();\n};\n\nconst addAdmin = async (adminData) => {\n  const token = localStorage.getItem('userToken');\n  const response = await fetch(`${API_URL}admin`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(adminData),\n  });\n  if (!response.ok)\n    throw new Error('Erreur lors de l’ajout de l’administrateur');\n  return await response.json();\n};\n\nconst editAdmin = async (id, adminData) => {\n  const token = localStorage.getItem('userToken');\n  const response = await fetch(`${API_URL}admin/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(adminData),\n  });\n  if (!response.ok)\n    throw new Error('Erreur lors de la mise à jour de l’administrateur');\n  return await response.json();\n};\n\nconst deleteAdmin = async (id) => {\n  const token = localStorage.getItem('userToken');\n  const response = await fetch(`${API_URL}admin/${id}`, {\n    method: 'DELETE',\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  if (!response.ok)\n    throw new Error('Erreur lors de la suppression de l’administrateur');\n  return await response.json();\n};\n\nexport const apiService = {\n  /* ------------- AUDIO ------------- */\n  getAudios,\n  getSingleAudio,\n  editAudio,\n  uploadAudio,\n  deleteAudio,\n  streamAudio,\n  getStreamingCount,\n  /* ------------- ARTIST ------------- */\n  getArtists,\n  getSingleArtist,\n  editArtist,\n  createArtist,\n  deleteArtist,\n  /* ------------- ALBUM ------------- */\n  getAlbums,\n  getSingleAlbum,\n  editAlbum,\n  createAlbum,\n  deleteAlbum,\n  /* ------------- ADMIN ------------- */\n  getAdmins,\n  getSingleAdmin,\n  addAdmin,\n  editAdmin,\n  deleteAdmin,\n};\n","import React, { useState, useEffect, lazy } from 'react';\nimport { apiService } from '../services/apiService';\nimport { notificationService } from '../services/notificationService';\nimport './index.css';\n\nimport Loader from '../components/Loader';\nconst CardList = lazy(() => import('../components/CardList'));\n\nconst ArtistDashboardView = () => {\n  const [artists, setArtists] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchArtists = async () => {\n      try {\n        setIsLoading(true);\n        const fetchedArtists = await apiService.getArtists();\n        setArtists(\n          fetchedArtists.map((artist) => ({\n            id: artist._id,\n            title: artist.name,\n          }))\n        );\n      } catch (error) {\n        console.error(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchArtists();\n    notificationService.notify('Audios chargés avec succès', 'success');\n  }, []);\n\n  if (isLoading) {\n    return (\n      <div className=\"dashboard-list-view\">\n        <h2>Artist Dashboard</h2>\n        <Loader />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"dashboard-list-view \">\n      <h2>Artist Dashboard</h2>\n      <CardList items={artists} type=\"artist\" />\n    </div>\n  );\n};\n\nexport default ArtistDashboardView;\n"],"names":["Loader","_jsx","className","children","API_URL","process","apiService","getAudios","async","response","fetch","concat","ok","Error","json","getSingleAudio","id","editAudio","audioData","method","headers","body","JSON","stringify","uploadAudio","formData","FormData","append","audioFile","deleteAudio","streamAudio","getStreamingCount","getArtists","getSingleArtist","editArtist","artistData","createArtist","deleteArtist","getAlbums","getSingleAlbum","editAlbum","albumData","createAlbum","deleteAlbum","getAdmins","token","localStorage","getItem","Authorization","getSingleAdmin","addAdmin","adminData","editAdmin","deleteAdmin","CardList","lazy","ArtistDashboardView","artists","setArtists","useState","isLoading","setIsLoading","useEffect","fetchedArtists","map","artist","_id","title","name","error","console","fetchArtists","notificationService","notify","_jsxs","items","type"],"sourceRoot":""}