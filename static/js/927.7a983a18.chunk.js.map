{"version":3,"file":"static/js/927.7a983a18.chunk.js","mappings":"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","sources":["components/CardList/index.js","services/indexerDBService.js"],"sourcesContent":["import React, { useState, useMemo, lazy, Suspense } from 'react';\nimport { notificationService } from '../../services/notificationService';\nimport { apiService } from '../../services/apiService';\nimport { addAlbum, addArtist, addAudio } from '../../services/indexerDBService';\nimport {\n  transformAlbums,\n  transformAudio,\n  transformArtist,\n} from '../../services/transformService';\nimport PropTypes from 'prop-types';\n\nimport Loader from '../Loader';\nconst Card = lazy(() => import('../Card'));\nconst CardAdd = lazy(() => import('../CardAdd'));\nconst PageControls = lazy(() => import('../PageControls'));\nconst Search = lazy(() => import('../Search'));\n\nconst ITEMS_PER_PAGE = 4;\n\nconst CardList = ({ items, type, onRefresh }) => {\n  const [currentPage, setCurrentPage] = useState(1);\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const filteredItems = useMemo(() => {\n    return items.filter((item) => {\n      const titleMatch = item.title\n        ? item.title.toLowerCase().includes(searchQuery.toLowerCase())\n        : false;\n      const artistMatch = item.artist\n        ? item.artist.toLowerCase().includes(searchQuery.toLowerCase())\n        : false;\n      return titleMatch || artistMatch;\n    });\n  }, [items, searchQuery]);\n\n  const totalPages = Math.ceil(filteredItems.length / ITEMS_PER_PAGE);\n  const currentItems = useMemo(() => {\n    const start = (currentPage - 1) * ITEMS_PER_PAGE;\n    return filteredItems.slice(start, start + ITEMS_PER_PAGE);\n  }, [currentPage, filteredItems]);\n\n  const renderListItems = useMemo(\n    () => (\n      <Suspense fallback={<Loader />}>\n        {currentItems.map((item) => (\n          <Card key={item._id} data={item} type={type} onRefresh={onRefresh} />\n        ))}\n      </Suspense>\n    ),\n    [currentItems, type]\n  );\n\n  const goToPreviousPage = () =>\n    setCurrentPage((page) => Math.max(page - 1, 1));\n  const goToNextPage = () =>\n    setCurrentPage((page) => Math.min(page + 1, totalPages));\n\n  const handleSearchChange = (query) => {\n    setSearchQuery(query);\n    setCurrentPage(1);\n  };\n\n  const handleAddItem = async (newData, type) => {\n    try {\n      console.log('newData :', newData);\n      switch (type) {\n        case 'artist':\n          await apiService.createArtist(newData);\n          const newArtist = await apiService.getLastArtist();\n          const artistToAdd = await transformArtist(newArtist);\n          await addArtist(artistToAdd);\n          break;\n        case 'song':\n          await apiService.uploadAudio(newData);\n          const newAudio = await apiService.getLastAudio();\n          const audioToAdd = await transformAudio(\n            newAudio.audios[0],\n            newAudio,\n            newAudio.name\n          );\n          await addAudio(audioToAdd);\n          break;\n        case 'album':\n          await apiService.createAlbum(newData);\n          const newAlbum = await apiService.getLastAlbum();\n          const albumToAdd = await transformAlbums(newAlbum);\n          await addAlbum(albumToAdd);\n          break;\n        case 'admin':\n          await apiService.addAdmin(newData);\n          break;\n      }\n      notificationService.notify('Ajout réussie', 'success');\n      onRefresh();\n    } catch (error) {\n      notificationService.notify('Erreur', 'warning');\n      console.error(\"Erreur lors de l'ajout de l'élément :\", error);\n    }\n  };\n\n  return (\n    <div>\n      <div>\n        <Search onSearchChange={handleSearchChange} />\n      </div>\n      <PageControls\n        currentPage={currentPage}\n        totalPages={totalPages}\n        onPrevious={goToPreviousPage}\n        onNext={goToNextPage}\n      />\n      {renderListItems}\n      <CardAdd type={type} onAdd={handleAddItem} />\n      <PageControls\n        currentPage={currentPage}\n        totalPages={totalPages}\n        onPrevious={goToPreviousPage}\n        onNext={goToNextPage}\n      />\n    </div>\n  );\n};\n\nCardList.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.object).isRequired,\n  type: PropTypes.oneOf(['artist', 'song', 'album', 'admin']).isRequired,\n};\n\nexport default CardList;\n","const openDatabase = () => {\n  return new Promise((resolve, reject) => {\n    const request = indexedDB.open('mk-bospot', 1);\n\n    request.onupgradeneeded = (event) => {\n      const db = event.target.result;\n      db.createObjectStore('audios', { keyPath: '_id' });\n      db.createObjectStore('artists', { keyPath: '_id' });\n      db.createObjectStore('albums', { keyPath: '_id' });\n    };\n\n    request.onerror = (event) => {\n      reject(`Database error: ${event.target.errorCode}`);\n    };\n\n    request.onsuccess = (event) => {\n      resolve(event.target.result);\n    };\n  });\n};\n\nexport const saveAudios = async (audios) => {\n  const db = await openDatabase();\n  const transaction = db.transaction('audios', 'readwrite');\n  const store = transaction.objectStore('audios');\n\n  for (let audio of audios) {\n    store.put(audio);\n  }\n};\n\nexport const getAudios = async () => {\n  const db = await openDatabase();\n  const transaction = db.transaction('audios', 'readonly');\n  const store = transaction.objectStore('audios');\n\n  return new Promise((resolve, reject) => {\n    const request = store.getAll();\n\n    request.onerror = () => {\n      reject('Failed to retrieve data from database.');\n    };\n\n    request.onsuccess = () => {\n      resolve(request.result);\n    };\n  });\n};\n\nexport const addAudio = async (audio) => {\n  try {\n    const db = await openDatabase();\n    const transaction = db.transaction('audios', 'readwrite');\n    const store = transaction.objectStore('audios');\n\n    return new Promise((resolve, reject) => {\n      const request = store.add(audio);\n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(request.error);\n      transaction.oncomplete = () => console.log('Transaction completed.');\n      transaction.onerror = () => reject(transaction.error);\n    });\n  } catch (error) {\n    console.error('Error adding audio:', error);\n    throw error;\n  }\n};\n\nexport const deleteAudio = async (audio) => {\n  const db = await openDatabase();\n  const transaction = db.transaction('audios', 'readwrite');\n  const store = transaction.objectStore('audios');\n  store.delete(audio);\n};\n\nexport const updateAudio = async (audio) => {\n  try {\n    const db = await openDatabase();\n    const transaction = db.transaction('audios', 'readwrite');\n    const store = transaction.objectStore('audios');\n\n    return new Promise((resolve, reject) => {\n      const request = store.put(audio);\n\n      request.onsuccess = () => {\n        console.log('Audio updated successfully.');\n        resolve(request.result);\n      };\n      request.onerror = () => {\n        console.error('Error updating Audio:', request.error);\n        reject(request.error);\n      };\n\n      transaction.oncomplete = () =>\n        console.log('Transaction for updating Audio completed.');\n      transaction.onerror = () => {\n        console.error('Transaction error:', transaction.error);\n        reject(transaction.error);\n      };\n    });\n  } catch (error) {\n    console.error('Error updating Audio:', error);\n    throw error;\n  }\n};\n\nexport const saveArtists = async (artists) => {\n  const db = await openDatabase();\n  const transaction = db.transaction('artists', 'readwrite');\n  const store = transaction.objectStore('artists');\n\n  for (let artist of artists) {\n    store.put(artist);\n  }\n};\n\nexport const getArtists = async () => {\n  const db = await openDatabase();\n  const transaction = db.transaction('artists', 'readonly');\n  const store = transaction.objectStore('artists');\n\n  return new Promise((resolve, reject) => {\n    const request = store.getAll();\n\n    request.onerror = () => {\n      reject('Failed to retrieve data from database.');\n    };\n\n    request.onsuccess = () => {\n      resolve(request.result);\n    };\n  });\n};\n\nexport const addArtist = async (artist) => {\n  const db = await openDatabase();\n  const transaction = db.transaction('artists', 'readwrite');\n  const store = transaction.objectStore('artists');\n  store.add(artist);\n};\n\nexport const deleteArtist = async (artist) => {\n  const db = await openDatabase();\n  const transaction = db.transaction('artists', 'readwrite');\n  const store = transaction.objectStore('artists');\n  store.delete(artist);\n};\n\nexport const updateArtist = async (artist) => {\n  try {\n    const db = await openDatabase();\n    const transaction = db.transaction('artists', 'readwrite');\n    const store = transaction.objectStore('artists');\n\n    return new Promise((resolve, reject) => {\n      const request = store.put(artist);\n\n      request.onsuccess = () => {\n        console.log('Artist updated successfully.');\n        resolve(request.result);\n      };\n      request.onerror = () => {\n        console.error('Error updating Artist:', request.error);\n        reject(request.error);\n      };\n\n      transaction.oncomplete = () =>\n        console.log('Transaction for updating Artist completed.');\n      transaction.onerror = () => {\n        console.error('Transaction error:', transaction.error);\n        reject(transaction.error);\n      };\n    });\n  } catch (error) {\n    console.error('Error updating Artist:', error);\n    throw error;\n  }\n};\n\nexport const saveAlbums = async (albums) => {\n  const db = await openDatabase();\n  const transaction = db.transaction('albums', 'readwrite');\n  const store = transaction.objectStore('albums');\n\n  for (let album of albums) {\n    store.put(album);\n  }\n};\n\nexport const getAlbums = async () => {\n  const db = await openDatabase();\n  const transaction = db.transaction('albums', 'readonly');\n  const store = transaction.objectStore('albums');\n\n  return new Promise((resolve, reject) => {\n    const request = store.getAll();\n\n    request.onerror = () => {\n      reject('Failed to retrieve data from database.');\n    };\n\n    request.onsuccess = () => {\n      resolve(request.result);\n    };\n  });\n};\n\nexport const addAlbum = async (album) => {\n  try {\n    const db = await openDatabase();\n    const transaction = db.transaction('albums', 'readwrite');\n    const store = transaction.objectStore('albums');\n\n    return new Promise((resolve, reject) => {\n      const request = store.add(album);\n\n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(request.error);\n      transaction.oncomplete = () =>\n        console.log('Transaction for adding album completed.');\n\n      transaction.onerror = () => reject(transaction.error);\n    });\n  } catch (error) {\n    console.error('Error adding album:', error);\n    throw error;\n  }\n};\n\nexport const deleteAlbum = async (album) => {\n  const db = await openDatabase();\n  const transaction = db.transaction('albums', 'readwrite');\n  const store = transaction.objectStore('albums');\n  store.delete(album);\n};\n\nexport const updateAlbum = async (album) => {\n  try {\n    const db = await openDatabase();\n    const transaction = db.transaction('albums', 'readwrite');\n    const store = transaction.objectStore('albums');\n\n    return new Promise((resolve, reject) => {\n      const request = store.put(album);\n\n      request.onsuccess = () => {\n        console.log('Album updated successfully.');\n        resolve(request.result);\n      };\n      request.onerror = () => {\n        console.error('Error updating album:', request.error);\n        reject(request.error);\n      };\n\n      transaction.oncomplete = () =>\n        console.log('Transaction for updating album completed.');\n      transaction.onerror = () => {\n        console.error('Transaction error:', transaction.error);\n        reject(transaction.error);\n      };\n    });\n  } catch (error) {\n    console.error('Error updating album:', error);\n    throw error;\n  }\n};\n"],"names":["Card","lazy","CardAdd","PageControls","Search","_ref","items","type","onRefresh","currentPage","setCurrentPage","useState","searchQuery","setSearchQuery","filteredItems","useMemo","filter","item","titleMatch","title","toLowerCase","includes","artistMatch","artist","totalPages","Math","ceil","length","currentItems","start","slice","renderListItems","_jsx","Suspense","fallback","Loader","children","map","data","_id","goToPreviousPage","page","max","goToNextPage","min","_jsxs","onSearchChange","query","onPrevious","onNext","onAdd","async","newData","console","log","apiService","createArtist","newArtist","getLastArtist","artistToAdd","transformArtist","addArtist","uploadAudio","newAudio","getLastAudio","audioToAdd","transformAudio","audios","name","addAudio","createAlbum","newAlbum","getLastAlbum","albumToAdd","transformAlbums","addAlbum","addAdmin","notificationService","notify","error","openDatabase","Promise","resolve","reject","request","indexedDB","open","onupgradeneeded","event","db","target","result","createObjectStore","keyPath","onerror","concat","errorCode","onsuccess","saveAudios","store","transaction","objectStore","audio","put","getAudios","getAll","add","oncomplete","deleteAudio","delete","updateAudio","saveArtists","artists","getArtists","deleteArtist","updateArtist","saveAlbums","album","albums","getAlbums","deleteAlbum","updateAlbum"],"sourceRoot":""}