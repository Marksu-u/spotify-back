{"version":3,"file":"static/js/623.44b2fa98.chunk.js","mappings":"+IAGA,MAMA,EANeA,KACbC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,mBAAkBC,UAC/BF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,Y,iCCLnB,MAAME,EAAUC,sEAqRHC,EAAa,CAExBC,UApRgBC,UAChB,MAAMC,EAAG,GAAAC,OAAMN,EAAO,SAChBO,QAAiBC,MAAMH,GAC7B,IAAKE,EAASE,GAAI,MAAM,IAAIC,MAAM,wCAClC,aAAaH,EAASI,MAAM,EAiR5BC,eA9QqBR,UACrB,MAAMG,QAAiBC,MAAM,GAADF,OAAIN,EAAO,UAAAM,OAASO,IAChD,IAAKN,EAASE,GACZ,MAAM,IAAIC,MAAM,wDAClB,aAAaH,EAASI,MAAM,EA2Q5BG,UAxQgBV,MAAOS,EAAIE,KAC3B,MAAMC,EAAQC,aAAaC,QAAQ,aAC7BX,QAAiBC,MAAM,GAADF,OAAIN,EAAO,UAAAM,OAASO,GAAM,CACpDM,OAAQ,MACRC,QAAS,CACP,eAAgB,mBAChBC,cAAc,UAADf,OAAYU,IAE3BM,KAAMC,KAAKC,UAAUT,KAEvB,IAAKR,EAASE,GACZ,MAAM,IAAIC,MAAM,kDAClB,aAAaH,EAASI,MAAM,EA6P5Bc,YA1PkBrB,UAClB,MAAMY,EAAQC,aAAaC,QAAQ,aAC7BQ,EAAW,IAAIC,SACrBD,EAASE,OAAO,YAAaC,GAE7B,MAAMtB,QAAiBC,MAAM,GAADF,OAAIN,EAAO,gBAAgB,CACrDmB,OAAQ,OACRC,QAAS,CACPC,cAAc,UAADf,OAAYU,IAE3BM,KAAMI,IAER,IAAKnB,EAASE,GAAI,MAAM,IAAIC,MAAM,gDAClC,aAAaH,EAASI,MAAM,EA8O5BmB,YA3OkB1B,UAClB,MAAMY,EAAQC,aAAaC,QAAQ,aAC7BX,QAAiBC,MAAM,GAADF,OAAIN,EAAO,UAAAM,OAASO,GAAM,CACpDM,OAAQ,SACRC,QAAS,CACPC,cAAc,UAADf,OAAYU,MAG7B,IAAKT,EAASE,GAAI,MAAM,IAAIC,MAAM,iDAClC,aAAaH,EAASI,MAAM,EAmO5BoB,YAhOkB3B,UAClB,MAAMG,QAAiBC,MAAM,GAADF,OAAIN,EAAO,iBAAAM,OAAgBO,IACvD,IAAKN,EAASE,GAAI,MAAM,IAAIC,MAAM,4CAClC,aAAaH,EAASI,MAAM,EA8N5BqB,kBA3NwB5B,UACxB,MAAMG,QAAiBC,MAAM,GAADF,OAAIN,EAAO,mBAAAM,OAAkBO,IACzD,IAAKN,EAASE,GACZ,MAAM,IAAIC,MAAM,4DAClB,aAAaH,EAASI,MAAM,EAyN5BsB,WArNiB7B,UACjB,MAAMG,QAAiBC,MAAM,GAADF,OAAIN,EAAO,WACvC,IAAKO,EAASE,GAAI,MAAM,IAAIC,MAAM,0CAClC,aAAaH,EAASI,MAAM,EAmN5BuB,cAhN2B9B,UAC3B,MAAMG,QAAiBC,MAAM,GAADF,OAAIN,EAAO,gBAEvC,aADmBO,EAASI,MACjB,EA8MXwB,gBA3MsB/B,UACtB,MAAMG,QAAiBC,MAAM,GAADF,OAAIN,EAAO,WAAAM,OAAUO,IACjD,IAAKN,EAASE,GACZ,MAAM,IAAIC,MAAM,0DAClB,aAAaH,EAASI,MAAM,EAwM5ByB,WArMiBhC,UACjB,MAAMY,EAAQC,aAAaC,QAAQ,aAC7BL,EAAKwB,EAAWxB,GAChBN,QAAiBC,MAAM,GAADF,OAAIN,EAAO,WAAAM,OAAUO,GAAM,CACrDM,OAAQ,MACRC,QAAS,CACP,eAAgB,mBAChBC,cAAc,UAADf,OAAYU,IAE3BM,KAAMC,KAAKC,UAAUa,KAEvB,IAAK9B,EAASE,GACZ,MAAM,IAAIC,MAAM,oDAClB,aAAaH,EAASI,MAAM,EAyL5B2B,aAtLmBlC,UACnB,MAAMY,EAAQC,aAAaC,QAAQ,aAC7BX,QAAiBC,MAAM,GAADF,OAAIN,EAAO,UAAU,CAC/CmB,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChBC,cAAc,UAADf,OAAYU,IAE3BM,KAAMC,KAAKC,UAAUa,KAEvB,IAAK9B,EAASE,GAAI,MAAM,IAAIC,MAAM,mDAClC,aAAaH,EAASI,MAAM,EA4K5B4B,aAzKmBnC,UACnB,MAAMY,EAAQC,aAAaC,QAAQ,aAC7BX,QAAiBC,MAAM,GAADF,OAAIN,EAAO,WAAAM,OAAUO,GAAM,CACrDM,OAAQ,SACRC,QAAS,CACPC,cAAc,UAADf,OAAYU,MAG7B,IAAKT,EAASE,GACZ,MAAM,IAAIC,MAAM,mDAClB,aAAaH,EAASI,MAAM,EAiK5B6B,UA7JgBpC,UAChB,MAAMG,QAAiBC,MAAM,GAADF,OAAIN,EAAO,UACvC,IAAKO,EAASE,GAAI,MAAM,IAAIC,MAAM,wCAClC,aAAaH,EAASI,MAAM,EA2J5B8B,aAxJmBrC,UACnB,MAAMG,QAAiBC,MAAM,GAADF,OAAIN,EAAO,cACvC,IAAKO,EAASE,GAAI,MAAM,IAAIC,MAAM,wCAClC,aAAaH,EAASI,MAAM,EAsJ5B+B,eApJqBtC,UACrB,MAAMG,QAAiBC,MAAM,GAADF,OAAIN,EAAO,UAAAM,OAASO,IAChD,IAAKN,EAASE,GACZ,MAAM,IAAIC,MAAM,wDAClB,aAAaH,EAASI,MAAM,EAiJ5BgC,UAhIgBvC,MAAOS,EAAI+B,KAC3B,MAAMlB,EAAW,IAAIC,SACrBD,EAASE,OAAO,QAASgB,EAAUC,OACnCnB,EAASE,OAAO,SAAUgB,EAAUE,UACpCpB,EAASE,OAAO,cAAegB,EAAUG,aACzCrB,EAASE,OAAO,QAASgB,EAAUI,OAE/BJ,EAAUK,SAAWL,EAAUK,mBAAmBC,MACpDxB,EAASE,OAAO,aAAcgB,EAAUK,SAG1C,MAAM1C,QAAiBC,MAAM,GAADF,OAAIN,EAAO,UAAAM,OAASO,GAAM,CACpDM,OAAQ,MACRC,QAAS,CACPC,cAAc,UAADf,OAAYU,QAE3BM,KAAMI,IAGR,IAAKnB,EAASE,GACZ,MAAM,IAAIC,MAAM,kDAClB,aAAaH,EAASI,MAAM,EA4G5BwC,YA/IkB/C,UAClBgD,QAAQC,IAAIT,GACZ,MAAMrC,QAAiBC,MAAM,GAADF,OAAIN,EAAO,SAAS,CAC9CmB,OAAQ,OACRC,QAAS,CACPC,cAAc,UAADf,OAAYU,QAE3BM,KAAMsB,IAGR,IAAKrC,EAASE,GAAI,MAAM,IAAIC,MAAM,iDAClC,aAAaH,EAASI,MAAM,EAqI5B2C,YA1GkBlD,UAClB,MAAMY,EAAQC,aAAaC,QAAQ,aAC7BX,QAAiBC,MAAM,GAADF,OAAIN,EAAO,UAAAM,OAASO,GAAM,CACpDM,OAAQ,SACRC,QAAS,CACPC,cAAc,UAADf,OAAYU,MAG7B,IAAKT,EAASE,GAAI,MAAM,IAAIC,MAAM,iDAClC,aAAaH,EAASI,MAAM,EAmG5B4C,UA/FgBnD,UAChB,MAAMY,EAAQC,aAAaC,QAAQ,aAC7BX,QAAiBC,MAAM,GAADF,OAAIN,EAAO,SAAS,CAC9CoB,QAAS,CACPC,cAAc,UAADf,OAAYU,MAG7B,IAAKT,EAASE,GACZ,MAAM,IAAIC,MACR,2EAEJ,aAAaH,EAASI,MAAM,EAqF5B6C,eAlFqBpD,UACrB,MAAMY,EAAQC,aAAaC,QAAQ,aAC7BX,QAAiBC,MAAM,GAADF,OAAIN,EAAO,UAAAM,OAASO,GAAM,CACpDO,QAAS,CACPC,cAAc,UAADf,OAAYU,MAG7B,IAAKT,EAASE,GACZ,MAAM,IAAIC,MACR,gFAEJ,aAAaH,EAASI,MAAM,EAwE5B8C,SArEerD,UACf,MAAMY,EAAQC,aAAaC,QAAQ,aAC7BX,QAAiBC,MAAM,GAADF,OAAIN,EAAO,SAAS,CAC9CmB,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChBC,cAAc,UAADf,OAAYU,IAE3BM,KAAMC,KAAKC,UAAUkC,KAEvB,IAAKnD,EAASE,GACZ,MAAM,IAAIC,MAAM,wDAClB,aAAaH,EAASI,MAAM,EA0D5BgD,UAvDgBvD,MAAOS,EAAI6C,KAC3B,MAAM1C,EAAQC,aAAaC,QAAQ,aAC7BX,QAAiBC,MAAM,GAADF,OAAIN,EAAO,UAAAM,OAASO,GAAM,CACpDM,OAAQ,MACRC,QAAS,CACP,eAAgB,mBAChBC,cAAc,UAADf,OAAYU,IAE3BM,KAAMC,KAAKC,UAAUkC,KAEvB,IAAKnD,EAASE,GACZ,MAAM,IAAIC,MAAM,6DAClB,aAAaH,EAASI,MAAM,EA4C5BiD,YAzCkBxD,UAClB,MAAMY,EAAQC,aAAaC,QAAQ,aAC7BX,QAAiBC,MAAM,GAADF,OAAIN,EAAO,UAAAM,OAASO,GAAM,CACpDM,OAAQ,SACRC,QAAS,CACPC,cAAc,UAADf,OAAYU,MAG7B,IAAKT,EAASE,GACZ,MAAM,IAAIC,MAAM,0DAClB,aAAaH,EAASI,MAAM,E,wFClR9B,MAAMkD,EAAeA,IACZ,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAUC,UAAUC,KAAK,aAAc,GAE7CF,EAAQG,gBAAmBC,IACzB,MAAMC,EAAKD,EAAME,OAAOC,OACxBF,EAAGG,kBAAkB,SAAU,CAAEC,QAAS,OAC1CJ,EAAGG,kBAAkB,UAAW,CAAEC,QAAS,OAC3CJ,EAAGG,kBAAkB,SAAU,CAAEC,QAAS,MAAO,EAGnDT,EAAQU,QAAWN,IACjBL,EAAO,mBAAD1D,OAAoB+D,EAAME,OAAOK,WAAY,EAGrDX,EAAQY,UAAaR,IACnBN,EAAQM,EAAME,OAAOC,OAAO,CAC7B,IAIQM,EAAa1E,UACxB,MAEM2E,SAFWlB,KACMmB,YAAY,SAAU,aACnBC,YAAY,UAEtC,IAAK,IAAIC,KAASC,EAChBJ,EAAMK,IAAIF,EACZ,EAGW/E,EAAYC,UACvB,MAEM2E,SAFWlB,KACMmB,YAAY,SAAU,YACnBC,YAAY,UAEtC,OAAO,IAAInB,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAUc,EAAMM,SAEtBpB,EAAQU,QAAU,KAChBX,EAAO,yCAAyC,EAGlDC,EAAQY,UAAY,KAClBd,EAAQE,EAAQO,OAAO,CACxB,GACD,EAGSc,EAAclF,UACzB,MAEM2E,SAFWlB,KACMmB,YAAY,UAAW,aACpBC,YAAY,WAEtC,IAAK,IAAIM,KAAUC,EACjBT,EAAMK,IAAIG,EACZ,EAGWtD,EAAa7B,UACxB,MAEM2E,SAFWlB,KACMmB,YAAY,UAAW,YACpBC,YAAY,WAEtC,OAAO,IAAInB,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAUc,EAAMM,SAEtBpB,EAAQU,QAAU,KAChBX,EAAO,yCAAyC,EAGlDC,EAAQY,UAAY,KAClBd,EAAQE,EAAQO,OAAO,CACxB,GACD,EAGSiB,EAAYrF,iBACNyD,KACMmB,YAAY,UAAW,aACpBC,YAAY,WAChCS,IAAIH,EAAO,EAGNI,EAAavF,UACxB,MAEM2E,SAFWlB,KACMmB,YAAY,SAAU,aACnBC,YAAY,UAEtC,IAAK,IAAIW,KAASC,EAChBd,EAAMK,IAAIQ,EACZ,EAGWpD,EAAYpC,UACvB,MAEM2E,SAFWlB,KACMmB,YAAY,SAAU,YACnBC,YAAY,UAEtC,OAAO,IAAInB,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAUc,EAAMM,SAEtBpB,EAAQU,QAAU,KAChBX,EAAO,yCAAyC,EAGlDC,EAAQY,UAAY,KAClBd,EAAQE,EAAQO,OAAO,CACxB,GACD,C,iHCtGJ,MAAMsB,GAAWC,EAAAA,EAAAA,OAAK,IAAM,8BAEtBC,EAAiB5F,UAAY,CACjCS,GAAIqE,EAAMe,IACVpD,MAAOqC,EAAMgB,SACbX,OAAQL,EAAMiB,SAASZ,OAAOa,KAC9BtD,SAAUoC,EAAMiB,SAASZ,OAAOU,IAChCL,MAAOV,EAAMiB,SAASP,MAAM/C,MAC5BwD,QAASnB,EAAMiB,SAASP,MAAMK,IAC9BK,KAAMpB,EAAMiB,SAASG,KACrBtD,MAAOkC,EAAMiB,SAASnD,MAAMuD,KAAK,MACjCC,MAAOC,EAAsBvB,EAAMiB,SAASlD,QAAQ,MAGhDwD,EAAyBxD,IAAa,IAADyD,EACzC,GAAW,OAAPzD,QAAO,IAAPA,GAAa,QAANyD,EAAPzD,EAAS0D,YAAI,IAAAD,GAAbA,EAAeC,KAAM,CACvB,MAAMC,EAAS,IAAIC,WAAW5D,EAAQ0D,KAAKA,MAC3C,IAAIG,EAAS,GAEb,OADAF,EAAOG,SAASC,GAAOF,GAAUG,OAAOC,aAAaF,KAC/C,QAAN1G,OAAe2C,EAAQkE,OAAM,YAAA7G,OAAW8G,OAAOC,KAAKP,GACtD,CACA,OAAOQ,CAAQ,EAgDjB,EA7C2BC,KACzB,MAAOpC,EAAQqC,IAAaC,EAAAA,EAAAA,UAAS,KAC9BC,EAAWC,IAAgBF,EAAAA,EAAAA,WAAS,GA6B3C,OA3BAG,EAAAA,EAAAA,YAAU,KACYxH,WAClBuH,GAAa,GAEb,IACE,IAAI5G,QAAkBZ,EAAAA,EAAAA,MAEtB,IAAKY,EAAU8G,OAAQ,CACrB,MAAMC,QAAsB5H,EAAAA,EAAWC,YACjC4H,QAA0BjE,QAAQkE,IACtCF,EAAcG,IAAIjC,UAEdlB,EAAAA,EAAAA,IAAWiD,GACjBhH,EAAYgH,CACd,CAEAP,EAAUzG,EACZ,CAAE,MAAOmH,GACP9E,QAAQ8E,MAAMA,EAChB,CAAC,QACCP,GAAa,EACf,GAGFQ,EAAa,GACZ,KAGDC,EAAAA,EAAAA,MAAA,OAAKtI,UAAU,sBAAqBC,SAAA,EAClCF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,oBACH2H,GACC7H,EAAAA,EAAAA,KAACD,EAAAA,EAAM,KAEPC,EAAAA,EAAAA,KAAAwI,EAAAA,SAAA,CAAAtI,UACEF,EAAAA,EAAAA,KAACiG,EAAQ,CAACwC,MAAOnD,EAAQoD,KAAK,aAG9B,C","sources":["components/Loader/index.js","services/apiService.js","services/indexerDBService.js","views/AudioDashboardView.js"],"sourcesContent":["import React from 'react';\nimport './index.css';\n\nconst Loader = () => (\n  <div className=\"loader-container\">\n    <div className=\"loader\"></div>\n  </div>\n);\n\nexport default Loader;\n","const API_URL = process.env.REACT_APP_API_URL;\n\n/* ------------- AUDIO ------------- */\nconst getAudios = async () => {\n  const url = `${API_URL}audio`;\n  const response = await fetch(url);\n  if (!response.ok) throw new Error('Erreur lors du chargement des audios');\n  return await response.json();\n};\n\nconst getSingleAudio = async (id) => {\n  const response = await fetch(`${API_URL}audio/${id}`);\n  if (!response.ok)\n    throw new Error('Erreur lors de la récupération de l’audio');\n  return await response.json();\n};\n\nconst editAudio = async (id, audioData) => {\n  const token = localStorage.getItem('userToken');\n  const response = await fetch(`${API_URL}audio/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(audioData),\n  });\n  if (!response.ok)\n    throw new Error('Erreur lors de la modification de l’audio');\n  return await response.json();\n};\n\nconst uploadAudio = async (audioFile) => {\n  const token = localStorage.getItem('userToken');\n  const formData = new FormData();\n  formData.append('audioFile', audioFile);\n\n  const response = await fetch(`${API_URL}audio/upload`, {\n    method: 'POST',\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n    body: formData,\n  });\n  if (!response.ok) throw new Error('Erreur lors de l’upload de l’audio');\n  return await response.json();\n};\n\nconst deleteAudio = async (id) => {\n  const token = localStorage.getItem('userToken');\n  const response = await fetch(`${API_URL}audio/${id}`, {\n    method: 'DELETE',\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  if (!response.ok) throw new Error('Erreur lors de la suppression de l’audio');\n  return await response.json();\n};\n\nconst streamAudio = async (id) => {\n  const response = await fetch(`${API_URL}audio/stream/${id}`);\n  if (!response.ok) throw new Error('Erreur lors du streaming de l’audio');\n  return await response.json();\n};\n\nconst getStreamingCount = async (id) => {\n  const response = await fetch(`${API_URL}audio/streamed/${id}`);\n  if (!response.ok)\n    throw new Error('Erreur lors de la récupération du nombre de stream');\n  return await response.json();\n};\n\n/* ------------- ARTIST ------------- */\nconst getArtists = async () => {\n  const response = await fetch(`${API_URL}artist`);\n  if (!response.ok) throw new Error('Erreur lors du chargement des artistes');\n  return await response.json();\n};\n\nexport const getLastArtist = async () => {\n  const response = await fetch(`${API_URL}artist/last`);\n  const data = await response.json();\n  return data;\n};\n\nconst getSingleArtist = async (id) => {\n  const response = await fetch(`${API_URL}artist/${id}`);\n  if (!response.ok)\n    throw new Error('Erreur lors de la récupération de l’artiste');\n  return await response.json();\n};\n\nconst editArtist = async (artistData) => {\n  const token = localStorage.getItem('userToken');\n  const id = artistData.id;\n  const response = await fetch(`${API_URL}artist/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(artistData),\n  });\n  if (!response.ok)\n    throw new Error('Erreur lors de la modification de l’artiste');\n  return await response.json();\n};\n\nconst createArtist = async (artistData) => {\n  const token = localStorage.getItem('userToken');\n  const response = await fetch(`${API_URL}artist`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(artistData),\n  });\n  if (!response.ok) throw new Error('Erreur lors de la création de l’artiste');\n  return await response.json();\n};\n\nconst deleteArtist = async (id) => {\n  const token = localStorage.getItem('userToken');\n  const response = await fetch(`${API_URL}artist/${id}`, {\n    method: 'DELETE',\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  if (!response.ok)\n    throw new Error('Erreur lors de la suppression de l’artiste');\n  return await response.json();\n};\n\n/* ------------- ALBUM ------------- */\nconst getAlbums = async () => {\n  const response = await fetch(`${API_URL}album`);\n  if (!response.ok) throw new Error('Erreur lors du chargement des albums');\n  return await response.json();\n};\n\nconst getAllAlbums = async () => {\n  const response = await fetch(`${API_URL}album/all`);\n  if (!response.ok) throw new Error('Erreur lors du chargement des albums');\n  return await response.json();\n};\nconst getSingleAlbum = async (id) => {\n  const response = await fetch(`${API_URL}album/${id}`);\n  if (!response.ok)\n    throw new Error('Erreur lors de la récupération de l’album');\n  return await response.json();\n};\n\nconst createAlbum = async (albumData) => {\n  console.log(albumData);\n  const response = await fetch(`${API_URL}album`, {\n    method: 'POST',\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n    body: albumData,\n  });\n\n  if (!response.ok) throw new Error('Erreur lors de la création de l’album');\n  return await response.json();\n};\n\nconst editAlbum = async (id, albumData) => {\n  const formData = new FormData();\n  formData.append('title', albumData.title);\n  formData.append('artist', albumData.artistId);\n  formData.append('releaseDate', albumData.releaseDate);\n  formData.append('genre', albumData.genre);\n\n  if (albumData.picture && albumData.picture instanceof File) {\n    formData.append('albumImage', albumData.picture);\n  }\n\n  const response = await fetch(`${API_URL}album/${id}`, {\n    method: 'PUT',\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n    body: formData,\n  });\n\n  if (!response.ok)\n    throw new Error('Erreur lors de la modification de l’album');\n  return await response.json();\n};\n\nconst deleteAlbum = async (id) => {\n  const token = localStorage.getItem('userToken');\n  const response = await fetch(`${API_URL}album/${id}`, {\n    method: 'DELETE',\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  if (!response.ok) throw new Error('Erreur lors de la suppression de l’album');\n  return await response.json();\n};\n\n/* ------------- ADMIN ------------- */\nconst getAdmins = async () => {\n  const token = localStorage.getItem('userToken');\n  const response = await fetch(`${API_URL}admin`, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  if (!response.ok)\n    throw new Error(\n      'Erreur lors de la récupération des données des administrateurs'\n    );\n  return await response.json();\n};\n\nconst getSingleAdmin = async (id) => {\n  const token = localStorage.getItem('userToken');\n  const response = await fetch(`${API_URL}admin/${id}`, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  if (!response.ok)\n    throw new Error(\n      'Erreur lors de la récupération des données de l’administrateur'\n    );\n  return await response.json();\n};\n\nconst addAdmin = async (adminData) => {\n  const token = localStorage.getItem('userToken');\n  const response = await fetch(`${API_URL}admin`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(adminData),\n  });\n  if (!response.ok)\n    throw new Error('Erreur lors de l’ajout de l’administrateur');\n  return await response.json();\n};\n\nconst editAdmin = async (id, adminData) => {\n  const token = localStorage.getItem('userToken');\n  const response = await fetch(`${API_URL}admin/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(adminData),\n  });\n  if (!response.ok)\n    throw new Error('Erreur lors de la mise à jour de l’administrateur');\n  return await response.json();\n};\n\nconst deleteAdmin = async (id) => {\n  const token = localStorage.getItem('userToken');\n  const response = await fetch(`${API_URL}admin/${id}`, {\n    method: 'DELETE',\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  if (!response.ok)\n    throw new Error('Erreur lors de la suppression de l’administrateur');\n  return await response.json();\n};\n\nexport const apiService = {\n  /* ------------- AUDIO ------------- */\n  getAudios,\n  getSingleAudio,\n  editAudio,\n  uploadAudio,\n  deleteAudio,\n  streamAudio,\n  getStreamingCount,\n  /* ------------- ARTIST ------------- */\n  getArtists,\n  getLastArtist,\n  getSingleArtist,\n  editArtist,\n  createArtist,\n  deleteArtist,\n  /* ------------- ALBUM ------------- */\n  getAlbums,\n  getAllAlbums,\n  getSingleAlbum,\n  editAlbum,\n  createAlbum,\n  deleteAlbum,\n  /* ------------- ADMIN ------------- */\n  getAdmins,\n  getSingleAdmin,\n  addAdmin,\n  editAdmin,\n  deleteAdmin,\n};\n","const openDatabase = () => {\n  return new Promise((resolve, reject) => {\n    const request = indexedDB.open('MyDatabase', 1);\n\n    request.onupgradeneeded = (event) => {\n      const db = event.target.result;\n      db.createObjectStore('audios', { keyPath: 'id' });\n      db.createObjectStore('artists', { keyPath: 'id' });\n      db.createObjectStore('albums', { keyPath: 'id' });\n    };\n\n    request.onerror = (event) => {\n      reject(`Database error: ${event.target.errorCode}`);\n    };\n\n    request.onsuccess = (event) => {\n      resolve(event.target.result);\n    };\n  });\n};\n\nexport const saveAudios = async (audios) => {\n  const db = await openDatabase();\n  const transaction = db.transaction('audios', 'readwrite');\n  const store = transaction.objectStore('audios');\n\n  for (let audio of audios) {\n    store.put(audio);\n  }\n};\n\nexport const getAudios = async () => {\n  const db = await openDatabase();\n  const transaction = db.transaction('audios', 'readonly');\n  const store = transaction.objectStore('audios');\n\n  return new Promise((resolve, reject) => {\n    const request = store.getAll();\n\n    request.onerror = () => {\n      reject('Failed to retrieve data from database.');\n    };\n\n    request.onsuccess = () => {\n      resolve(request.result);\n    };\n  });\n};\n\nexport const saveArtists = async (artists) => {\n  const db = await openDatabase();\n  const transaction = db.transaction('artists', 'readwrite');\n  const store = transaction.objectStore('artists');\n\n  for (let artist of artists) {\n    store.put(artist);\n  }\n};\n\nexport const getArtists = async () => {\n  const db = await openDatabase();\n  const transaction = db.transaction('artists', 'readonly');\n  const store = transaction.objectStore('artists');\n\n  return new Promise((resolve, reject) => {\n    const request = store.getAll();\n\n    request.onerror = () => {\n      reject('Failed to retrieve data from database.');\n    };\n\n    request.onsuccess = () => {\n      resolve(request.result);\n    };\n  });\n};\n\nexport const addArtist = async (artist) => {\n  const db = await openDatabase();\n  const transaction = db.transaction('artists', 'readwrite');\n  const store = transaction.objectStore('artists');\n  store.add(artist);\n};\n\nexport const saveAlbums = async (albums) => {\n  const db = await openDatabase();\n  const transaction = db.transaction('albums', 'readwrite');\n  const store = transaction.objectStore('albums');\n\n  for (let album of albums) {\n    store.put(album);\n  }\n};\n\nexport const getAlbums = async () => {\n  const db = await openDatabase();\n  const transaction = db.transaction('albums', 'readonly');\n  const store = transaction.objectStore('albums');\n\n  return new Promise((resolve, reject) => {\n    const request = store.getAll();\n\n    request.onerror = () => {\n      reject('Failed to retrieve data from database.');\n    };\n\n    request.onsuccess = () => {\n      resolve(request.result);\n    };\n  });\n};\n","import { lazy, useEffect, useState } from 'react';\nimport notFound from '../assets/404.png';\nimport { apiService } from '../services/apiService';\nimport { saveAudios, getAudios } from '../services/indexerDBService';\nimport './index.css';\n\nimport Loader from '../components/Loader';\nconst CardList = lazy(() => import('../components/CardList'));\n\nconst transformAudio = async (audio) => ({\n  id: audio._id,\n  title: audio.filename,\n  artist: audio.metadata.artist.name,\n  artistId: audio.metadata.artist._id,\n  album: audio.metadata.album.title,\n  albumId: audio.metadata.album._id,\n  date: audio.metadata.date,\n  genre: audio.metadata.genre.join(', '),\n  image: convertBufferToBase64(audio.metadata.picture[0]),\n});\n\nconst convertBufferToBase64 = (picture) => {\n  if (picture?.data?.data) {\n    const buffer = new Uint8Array(picture.data.data);\n    let binary = '';\n    buffer.forEach((b) => (binary += String.fromCharCode(b)));\n    return `data:${picture.format};base64,${window.btoa(binary)}`;\n  }\n  return notFound;\n};\n\nconst AudioDashboardView = () => {\n  const [audios, setAudios] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchAudios = async () => {\n      setIsLoading(true);\n\n      try {\n        let audioData = await getAudios();\n\n        if (!audioData.length) {\n          const fetchedAudios = await apiService.getAudios();\n          const transformedAudios = await Promise.all(\n            fetchedAudios.map(transformAudio)\n          );\n          await saveAudios(transformedAudios);\n          audioData = transformedAudios;\n        }\n\n        setAudios(audioData);\n      } catch (error) {\n        console.error(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchAudios();\n  }, []);\n\n  return (\n    <div className=\"dashboard-list-view\">\n      <h2>Audio Dashboard</h2>\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <>\n          <CardList items={audios} type=\"song\" />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default AudioDashboardView;\n"],"names":["Loader","_jsx","className","children","API_URL","process","apiService","getAudios","async","url","concat","response","fetch","ok","Error","json","getSingleAudio","id","editAudio","audioData","token","localStorage","getItem","method","headers","Authorization","body","JSON","stringify","uploadAudio","formData","FormData","append","audioFile","deleteAudio","streamAudio","getStreamingCount","getArtists","getLastArtist","getSingleArtist","editArtist","artistData","createArtist","deleteArtist","getAlbums","getAllAlbums","getSingleAlbum","editAlbum","albumData","title","artistId","releaseDate","genre","picture","File","createAlbum","console","log","deleteAlbum","getAdmins","getSingleAdmin","addAdmin","adminData","editAdmin","deleteAdmin","openDatabase","Promise","resolve","reject","request","indexedDB","open","onupgradeneeded","event","db","target","result","createObjectStore","keyPath","onerror","errorCode","onsuccess","saveAudios","store","transaction","objectStore","audio","audios","put","getAll","saveArtists","artist","artists","addArtist","add","saveAlbums","album","albums","CardList","lazy","transformAudio","_id","filename","metadata","name","albumId","date","join","image","convertBufferToBase64","_picture$data","data","buffer","Uint8Array","binary","forEach","b","String","fromCharCode","format","window","btoa","notFound","AudioDashboardView","setAudios","useState","isLoading","setIsLoading","useEffect","length","fetchedAudios","transformedAudios","all","map","error","fetchAudios","_jsxs","_Fragment","items","type"],"sourceRoot":""}