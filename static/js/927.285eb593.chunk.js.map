{"version":3,"file":"static/js/927.285eb593.chunk.js","mappings":"yLAMA,MAAMA,GAAOC,EAAAA,EAAAA,OAAK,IAAM,+BAClBC,GAAUD,EAAAA,EAAAA,OAAK,IAAM,+BACrBE,GAAeF,EAAAA,EAAAA,OAAK,IAAM,+BAC1BG,GAASH,EAAAA,EAAAA,OAAK,IAAM,+BA4F1B,EAxFiBI,IAAsB,IAArB,MAAEC,EAAK,KAAEC,GAAMF,EAC/B,MAAOG,EAAaC,IAAkBC,EAAAA,EAAAA,UAAS,IACxCC,EAAaC,IAAkBF,EAAAA,EAAAA,UAAS,IAEzCG,GAAgBC,EAAAA,EAAAA,UAAQ,IACrBR,EAAMS,QAAQC,IACnB,MAAMC,IAAaD,EAAKE,OACpBF,EAAKE,MAAMC,cAAcC,SAAST,EAAYQ,eAE5CE,IAAcL,EAAKM,QACrBN,EAAKM,OAAOH,cAAcC,SAAST,EAAYQ,eAEnD,OAAOF,GAAcI,CAAW,KAEjC,CAACf,EAAOK,IAELY,EAAaC,KAAKC,KAAKZ,EAAca,OAlBtB,GAmBfC,GAAeb,EAAAA,EAAAA,UAAQ,KAC3B,MAAMc,EApBa,GAoBJpB,EAAc,GAC7B,OAAOK,EAAcgB,MAAMD,EAAOA,EArBf,EAqBsC,GACxD,CAACpB,EAAaK,IAEXiB,GAAkBhB,EAAAA,EAAAA,UACtB,IACEa,EAAaI,KAAKf,IAChBgB,EAAAA,EAAAA,KAACC,EAAAA,SAAQ,CAAeC,UAAUF,EAAAA,EAAAA,KAACG,EAAAA,EAAM,IAAIC,UAC3CJ,EAAAA,EAAAA,KAAChC,EAAI,CAACqC,KAAMrB,EAAMT,KAAMA,KADXS,EAAKsB,OAIxB,CAACX,EAAcpB,IAGXgC,EAAmBA,IACvB9B,GAAgB+B,GAAShB,KAAKiB,IAAID,EAAO,EAAG,KACxCE,EAAeA,IACnBjC,GAAgB+B,GAAShB,KAAKmB,IAAIH,EAAO,EAAGjB,KAyB9C,OACEqB,EAAAA,EAAAA,MAAA,OAAAR,SAAA,EACEJ,EAAAA,EAAAA,KAAA,OAAAI,UACEJ,EAAAA,EAAAA,KAAC5B,EAAM,CAACyC,eA1BcC,IAC1BlC,EAAekC,GACfrC,EAAe,EAAE,OA0BfuB,EAAAA,EAAAA,KAAC7B,EAAY,CACXK,YAAaA,EACbe,WAAYA,EACZwB,WAAYR,EACZS,OAAQN,IAETZ,GACDE,EAAAA,EAAAA,KAAC9B,EAAO,CAACK,KAAMA,EAAM0C,MA9BHC,MAAOC,EAAS5C,KACpC,IAEE,GADA6C,QAAQC,IAAIF,GAEL,WADC5C,QAEE+C,EAAAA,EAAWC,aAAaJ,GAOlCK,EAAAA,EAAoBC,OAAO,mBAAiB,UAC9C,CAAE,MAAOC,GACPN,QAAQM,MAAM,8CAAyCA,EACzD,MAgBE1B,EAAAA,EAAAA,KAAC7B,EAAY,CACXK,YAAaA,EACbe,WAAYA,EACZwB,WAAYR,EACZS,OAAQN,MAEN,C","sources":["components/CardList/index.js"],"sourcesContent":["import React, { useState, useMemo, lazy, Suspense } from 'react';\nimport { notificationService } from '../../services/notificationService';\nimport { apiService } from '../../services/apiService';\nimport PropTypes from 'prop-types';\n\nimport Loader from '../Loader';\nconst Card = lazy(() => import('../Card'));\nconst CardAdd = lazy(() => import('../CardAdd'));\nconst PageControls = lazy(() => import('../PageControls'));\nconst Search = lazy(() => import('../Search'));\n\nconst ITEMS_PER_PAGE = 4;\n\nconst CardList = ({ items, type }) => {\n  const [currentPage, setCurrentPage] = useState(1);\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const filteredItems = useMemo(() => {\n    return items.filter((item) => {\n      const titleMatch = item.title\n        ? item.title.toLowerCase().includes(searchQuery.toLowerCase())\n        : false;\n      const artistMatch = item.artist\n        ? item.artist.toLowerCase().includes(searchQuery.toLowerCase())\n        : false;\n      return titleMatch || artistMatch;\n    });\n  }, [items, searchQuery]);\n\n  const totalPages = Math.ceil(filteredItems.length / ITEMS_PER_PAGE);\n  const currentItems = useMemo(() => {\n    const start = (currentPage - 1) * ITEMS_PER_PAGE;\n    return filteredItems.slice(start, start + ITEMS_PER_PAGE);\n  }, [currentPage, filteredItems]);\n\n  const renderListItems = useMemo(\n    () =>\n      currentItems.map((item) => (\n        <Suspense key={item.id} fallback={<Loader />}>\n          <Card data={item} type={type} />\n        </Suspense>\n      )),\n    [currentItems, type]\n  );\n\n  const goToPreviousPage = () =>\n    setCurrentPage((page) => Math.max(page - 1, 1));\n  const goToNextPage = () =>\n    setCurrentPage((page) => Math.min(page + 1, totalPages));\n\n  const handleSearchChange = (query) => {\n    setSearchQuery(query);\n    setCurrentPage(1);\n  };\n\n  const handleAddItem = async (newData, type) => {\n    try {\n      console.log(newData);\n      switch (type) {\n        case 'artist':\n          await apiService.createArtist(newData);\n          break;\n        case 'song':\n          break;\n        case 'album':\n          break;\n      }\n      notificationService.notify('Ajout réussie', 'success');\n    } catch (error) {\n      console.error(\"Erreur lors de l'ajout de l'élément :\", error);\n    }\n  };\n\n  return (\n    <div>\n      <div>\n        <Search onSearchChange={handleSearchChange} />\n      </div>\n      <PageControls\n        currentPage={currentPage}\n        totalPages={totalPages}\n        onPrevious={goToPreviousPage}\n        onNext={goToNextPage}\n      />\n      {renderListItems}\n      <CardAdd type={type} onAdd={handleAddItem} />\n      <PageControls\n        currentPage={currentPage}\n        totalPages={totalPages}\n        onPrevious={goToPreviousPage}\n        onNext={goToNextPage}\n      />\n    </div>\n  );\n};\n\nCardList.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.object).isRequired,\n  type: PropTypes.oneOf(['artist', 'song', 'album', 'admin']).isRequired,\n};\n\nexport default CardList;\n"],"names":["Card","lazy","CardAdd","PageControls","Search","_ref","items","type","currentPage","setCurrentPage","useState","searchQuery","setSearchQuery","filteredItems","useMemo","filter","item","titleMatch","title","toLowerCase","includes","artistMatch","artist","totalPages","Math","ceil","length","currentItems","start","slice","renderListItems","map","_jsx","Suspense","fallback","Loader","children","data","id","goToPreviousPage","page","max","goToNextPage","min","_jsxs","onSearchChange","query","onPrevious","onNext","onAdd","async","newData","console","log","apiService","createArtist","notificationService","notify","error"],"sourceRoot":""}